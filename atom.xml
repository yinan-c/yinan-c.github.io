<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>1nan</title>
  <link ref="self" href=""/>
  <link ref="alternate" href="https://yinan.me/"/>
  <updated></updated>
  <author>
    <name>Yinan</name>
  </author>
  <id>ba15f2bcfa5336d8d2f005c8f0aa7951c3b52e50</id>

  
  <entry>
    <title>RSSBrew beta 简单介绍和使用指南</title>
    <link ref="alternate" href="https://yinan.me/rssbrew-config.html" />
    <id>rssbrew-config</id>
    <published>2024-06-02 18:22:45+01:00</published>
    <updated>2024-06-02 18:32:27+01:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;p&gt;&lt;a href=&#34;https://github.com/yinan-c/rssbrew&#34;&gt;RSSBrew&lt;/a&gt; 是一个 RSS 处理和管理的工具。简单来说就是通过处理用户添加 original feed，系统后台获取原文章，根据用户设置进行一系列处理，把处理后的文章重新聚合生成一个新的 processed feed，然后用户订阅这个 processed feed 即可。&lt;/p&gt;
&lt;p&gt;目前拥有以下功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以应用于文章，标题，URL 的过滤条件和过滤组，可用来过滤文章是否进入最终的 feed 或者是否用生成摘要。&lt;/li&gt;
&lt;li&gt;聚合多个 feed，生成一个新的 feed。&lt;/li&gt;
&lt;li&gt;使用 AI 对用户过滤后的文章单独生成摘要，附在原文前，可自定义 prompt。&lt;/li&gt;
&lt;li&gt;周报日报功能，可以将一天或者一周的文章聚合成一个文章。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;安装教程请参考 &lt;a href=&#34;https://github.com/yinan-c/rssbrew/blob/main/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt;。安装位置需要 docker engine，需要有公网 ip 的服务器，推荐使用 vps。一个域名（可选），如果没有域名，可以使用 ip:port（默认8000） 的形式访问。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于最近加了 huey 作为任务队列，所以不通过 docker-compose 安装的方法暂时没有更新，目前推荐 docker-compose 安装。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果需要配置域名访问，推荐使用 caddy 或者 nginx 作为反代，这里就不做详细介绍了。
注意需要把部署的域名加入到 &lt;code&gt;.env&lt;/code&gt; 的变量 DEPLOYMNET_URL 中才能正常通过自定义域名访问。如果没有，请把 ip:port 加入到 DEPLOYMNET_URL 中，不需要加 http:// 等协议头。&lt;/p&gt;
&lt;h2&gt;使用说明&lt;/h2&gt;
&lt;p&gt;有用户反馈想要使用说明，由于目前文档没有写好，这里简单写一下如何使用。访问应用后有四个配置项，分别是 original feeds, processed feeds, tags, app setting。因为测试阶段短时间内文档不会完成，所以我这里尽可能写的详细，请根据需要的功能跳转到对应的段落阅读。&lt;/p&gt;
&lt;h3&gt;App setting&lt;/h3&gt;
&lt;p&gt;App setting 用来配置 auth code，设置后需要在访问时在订阅源地址后面加上 &lt;code&gt;?key=your_auth_code&lt;/code&gt; 才能访问。&lt;/p&gt;
&lt;p&gt;original feeds 用来添加原始的，需要处理的 atom 或者 xml feed，可以配置 url, 以及可选配置名称和 tag。 Tag 是用来方便分类管理 original feeds 的。&lt;/p&gt;
&lt;p&gt;processed feeds 是处理后的 feed，在列表栏从左到右是名称，每次更新周期需要总结的文章数，订阅链接，以及包含了多少个 original feeds。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;processed_feed&#34; src=&#34;https://yinan.me/pics/processed_feed.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点击名称进入 processed feed 的配置页面，可以配置过滤条件，过滤组，摘要和 日周报的生成。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;processed_feed_config&#34; src=&#34;https://yinan.me/pics/processed_feed_config.png&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;聚合功能&lt;/h3&gt;
&lt;p&gt;前两项名称和 Feeds 是必须的，feeds 是多选框，用来添加已有的 original feeds，最终会把所有选中的 feeds 聚合到这个 processed feed 中。有了这两个配置，理论上就可以用上聚合功能订阅了，接下里所有的配置都是可选的。&lt;/p&gt;
&lt;p&gt;Feed group relational operator (过滤组关系) 会在后面过滤组中详细介绍。目前先不用管。&lt;/p&gt;
&lt;h3&gt;Summarization options AI 摘要功能&lt;/h3&gt;
&lt;p&gt;在 summarization options 中，可以配置每次更新（测试阶段默认是每 5 分钟，在 docker-compose.yml 中通过 cron 变量可以把周期调大一点）总结的文章数，为 0 就是不用 AI 总结功能。可以选择语言，model, 自定义 prompt。默认 prompt 会给一条一句话总结和一个稍长的总结。默认效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;ai_summary&#34; src=&#34;https://yinan.me/pics/AI_summary_rssbrew.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Summary group relational operator (过滤组关系) 同上，会在后面过滤组中详细介绍。目前先不用管。&lt;/p&gt;
&lt;h3&gt;Digest options 日周报功能&lt;/h3&gt;
&lt;p&gt;Toggle digest 是开关，开启后会生成日报或者周报。默认是关闭的。如果开启，可以配置 daily/weekly。Last digest 的时间会在后台自动生成周日报时更新，&lt;/p&gt;
&lt;p&gt;留空即在下一次更新时自动生成 digest，后面系统会根据这个时间是否需要生成新的 digest。一般情况下，这个项不需要管，如果需要测试用手动生成周日报的功能，可以把时间调到一周前或者一日前。&lt;/p&gt;
&lt;p&gt;勾选 toggle digest 之后，可以配置周日报格式，主要由三大部分构成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;周/日报目录。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;目录就是一个简单的标题-链接的列表，可以一眼扫过一周更新的条目，如上显示。如果在 summarizaiton options 中开启了 AI 摘要功能并且用了默认的 prompt，除了标题和链接，还会有 AI 一句话总结。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;条目详细内容&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;如上图所示，紧跟着目录是 details，可以自选包含 AI 生成的摘要（需要在 summarization options 中开启 AI 摘要功能）和原文章内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;AI 分析你的周/日报。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;勾选 use ai digest, 可以配置 digest model (推荐使用 gpt-4 或者 4o, 我测试下来 3.5 turbo 偶尔会出现总结不全的情况) 和自定义 prompt。下面 send full articles 是指你是否想要 AI 总结周日报的文章全文，如果不勾选，为了节约 token，和防止条目过多过长，只会让他发送每篇文章的标题 url 和摘要（摘要需要在 summarization options 中开启 AI 摘要功能）。&lt;/p&gt;
&lt;p&gt;这是一个在 telegram channel rss 生成周报的效果：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt=&#34;digest_telegram&#34; src=&#34;https://yinan.me/pics/digest_telegram.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;以上三大部分关于周日报内容的配置都在 what to include in digest 中, 也就是 toc, one-line summary, summary, ai digest。&lt;/p&gt;
&lt;p&gt;另外，在 toggle digest 后面有一个选项 toggle entries。如果有些 feed 你只想看每周每天扫一遍周/日报，不想要看到其他的原文章条目更新，让你的未读堆积。你可以取消勾选 Toggle entries 来隐藏原文章条目，不要怕错过，他们会在日报周报中出现。&lt;/p&gt;
&lt;h3&gt;过滤和过滤组&lt;/h3&gt;
&lt;p&gt;我们还没有讨论到过滤，如果配置了以上的内容， processed feed 会把所有的 original feeds 聚合到一起，生成一个新的 feed。但是这个 feed 会包含所有的原文章，并且不管是什么文章，都会进入周日报，进入更新的 entries, 或者发给 AI 生成摘要，如果想要更加个人化的信息源，比如说监控关键词，比如说让 AI 长文总结，短文不总结，这需要过滤功能。&lt;/p&gt;
&lt;p&gt;为了实现高级的过滤，RSSBrew 用了两层过滤条件。也即 过滤组-过滤器。过滤组包含过滤器，负责管理组内所有过滤器的关系（任意条件 any /所有条件 all/无一条件 none = not any）满足以及过滤器的用途（用来完全屏蔽文章或者，不屏蔽文章只是过滤他是否总结，你还能看到这个条目，这个条目不需要总结了）。过滤器是具体的过滤条件，比如说标题/内容/url 包含某个关键词，或者文章长度大于某个值。&lt;/p&gt;
&lt;p&gt;多个过滤组之间还可以共同作用，他们之间的关系就是由上面提到的过滤组关系来决定的。比如说你有两个过滤组 A B 都是用来 Feed Filter(用来完全屏蔽文章) 的， 且他们之间是 any 的关系。分别由两个 and 过滤器构成，那么就可以实现高级的过滤运算逻辑比如：&lt;/p&gt;
&lt;p&gt;A or B = (A-1 and A-2) or (B-1 and B-2)&lt;/p&gt;
&lt;p&gt;当然如果你只是想要最简单的过滤，只需要一个过滤组，一个过滤器就可以了。即使这样你也可以通过配置 regex 让单层过滤器实现很多功能。&lt;/p&gt;
&lt;h2&gt;后期 plan 和功能&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;前端报错信息，目前很多报错只是记录在后台，没有返回给前端。出错了 debug 时需要查看 logs 日志。&lt;/li&gt;
&lt;li&gt;tag folder 功能完善,更好的分类管理&lt;/li&gt;
&lt;li&gt;opml 的批量导入导出&lt;/li&gt;
&lt;li&gt;全文获取&lt;/li&gt;
&lt;li&gt;json feed 支持&lt;/li&gt;
&lt;li&gt;完善文档&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不过目前正忙着写毕业论文和找工作，所以短期内这些功能都没有 ETA。但等忙完毕业论文会把这个项目完善，也会一直维护更新。欢迎在 &lt;a href=&#34;https://t.me/rssbrew&#34;&gt;telegram 交流群&lt;/a&gt; 和 GitHub issue 中里提出建议和需求。&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Hoarder - The Self-Hosted Bookmark Manager</title>
    <link ref="alternate" href="https://yinan.me/hoarder.html" />
    <id>hoarder</id>
    <published>2024-05-24 18:56:37+01:00</published>
    <updated>2024-05-24 19:04:45+01:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;p&gt;Trying out &lt;a href=&#34;https://github.com/hoarder-app/hoarder&#34;&gt;Hoarder&lt;/a&gt; app today, to see whether it would competes Anybox as my main bookmark manager. I do like self-hosting services, and I like hoarding stuff 🤭.&lt;/p&gt;
&lt;p&gt;At first sight, it feels like a complete app I can put in production, it has a iOS app with share sheet support, chrome extension for easily save from browser, it saves note and images.&lt;/p&gt;
&lt;p&gt;I really like the ability to have AI tagging for links and images so that I don&#39;t have to manually organize them. And the full text search is something Anybox doesn&#39;t have yet. While I write this article, May 2024, it is still under review in the &lt;a href=&#34;https://anybox.canny.io/feature-requests/p/full-text-search&#34;&gt;canny page of Anybox&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, there are some features missing before it can become my main bookmark manager. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hoarder-app/hoarder/issues/43&#34;&gt;REST API&lt;/a&gt; - for easily exporting data like links, tags, and for an Alfred workflow.&lt;blockquote&gt;
&lt;p&gt;For now, it provides a CLI tool, but I am installing the app on my homeserver instead of my laptop. I will have to ssh to use the CLI, not ideal. A REST API would be good for remotely managing data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Easy data export&lt;blockquote&gt;
&lt;p&gt;I don&#39;t seem to find a very good way to export data easily, for example screenshots, local cache, links.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Offline archiving&lt;blockquote&gt;
&lt;p&gt;For now, Hoarder supports plain text caching and screenshots. It would be good to see other formats supported (Planned, as of May 2024)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hoarder-app/hoarder/issues/172&#34;&gt;Local scrapper&lt;/a&gt; to fetch content after user login for some sites.&lt;blockquote&gt;
&lt;p&gt;What I like about Anybox is its integration with &lt;a href=&#34;https://github.com/gildas-lormeau/SingleFile&#34;&gt;SingleFile extension&lt;/a&gt;. It can directly save the .html downloaded to Anybox via API, so that any content behind paywall will also be downloaded. 
(It actually addresses the pity that SingleFile metadata only contains the first part of the full domain - it will only show something like https://github.com, when you directly download a  html with SingleFile metadata to DEVONthink)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other features could be useful:
- RSS subscription link&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Like what &lt;a href=&#34;https://github.com/sissbruecker/linkding&#34;&gt;linkding&lt;/a&gt; and &lt;a href=&#34;https://wallabag.org/&#34;&gt;wallabag&lt;/a&gt; provides. I am currently relying on RSS to sync my read-it-later from wallabag to DEVONthink.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To conclude, it will not replace Anybox with Hoarder for now. But it is a very young and promising open-source app with rapid iteration, someday it might will.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>苹果端 Todo App 简单比较</title>
    <link ref="alternate" href="https://yinan.me/todo-app.html" />
    <id>todo-app</id>
    <published>2024-05-22 00:32:57+01:00</published>
    <updated>2024-05-22 14:00:21+01:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;p&gt;继半年多前从 Things 转移到 OmniFocus 之后，今天又在探索苹果端几大 Todo App，主要比较了 Things, OmniFocus 以及 TickTick（唯一跨平台，已经赢了🤭）。&lt;/p&gt;
&lt;h2&gt;Things&lt;/h2&gt;
&lt;p&gt;先说说老朋友 Things，Logbook 显示我从2022年的7月开始用到了2023年的11月15日，等了一年半的 Things 4，始终没有等到。&lt;/p&gt;
&lt;p&gt;不过 Things 3 还是一如既往美观简洁好用，可惜相比较 OmniFocus 缺了以下我觉得很有用的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Filter/Smart List: Shortcuts 目前半残，如果我不能在组会前，看到在 PhD Area 完成了哪些项目我怎么给老板交差？&lt;/li&gt;
&lt;li&gt;Review Perspective: OmniFocus 可以帮你 keep track review 列表，Things 只能手动 Review。&lt;/li&gt;
&lt;li&gt;Automation: 在 OmniFocus 里可以写脚本把符合某些条件的 Todo 自动归类，或者 Tag。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;OmniFocus&lt;/h2&gt;
&lt;p&gt;我是从 OmniFocus 4 更新（2023年底）之后才开始重度使用的，上面其实已经把我这半年多用 OmniFocus 的感受列的差不多了，唯独有一点我还希望能够加上的，就是 Kanban View。&lt;/p&gt;
&lt;p&gt;我的任务通常会卡在某个节点比如说，计算中，或者等待回复，而不是简简单单的 0-1 两个状态，而 kanban 以及 Things 的 Heading 就很好地处理了这个问题。OmniFocus 虽然有 Nested Task，但是使用下来更像是子/母任务的从属关系，描述任务的状态我更多用的是标签，但是仍不如 Kanban 拖拽来的直观。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EDIT: 用 Tagging 作为 Kanban 的坏处在于它不是 exclusive 的，把任务从一个标签拖拽到另一个会让它同时打上两个标签，作为 Kanban 显然不理想。好在&lt;a href=&#34;https://discourse.omnigroup.com/t/sub-tag-exclusivity/41773/5&#34;&gt;论坛&lt;/a&gt;里有人提到用 Command + 拖拽就可以实现转移标签。&lt;/p&gt;
&lt;p&gt;另外，如果需要一个 Kanban board based on Tagging，可以看一下&lt;a href=&#34;https://omni-automation.com/omnifocus/plug-in-kanban-board.html&#34;&gt;这个插件&lt;/a&gt;，试用了一下还不错，从脚本上实现 exclusive tagging，把不同 board 的按钮放在工具栏也能实现在不同标签(Board)之间转移任务。比如说我现在的工具栏和 kanban 长这样：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/kanban.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;题外话，Things vs OmniFocus 的比较于我有点像 Anybox 和 DEVONthink 的比较，一个简洁漂亮，功能单一，能完成他该完成的，一个功能强大，有点 buggy，不够美观，&lt;/p&gt;
&lt;h2&gt;TickTick&lt;/h2&gt;
&lt;p&gt;一度觉得很理想，有 Kanban，四象限，过滤器，还有经典的日历视图。
除了没有 Area 的概念，Project 多了可能会很乱。
但是为什么不让我在 iOS 端用国内滴答的账号？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EDIT: 感谢读者提醒，把 App 语言修改成中文后，登录界面底下可以切换成国内滴答。我再体验几天，后续可能会更新详细体验和比较。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;其他玩家&lt;/h2&gt;
&lt;p&gt;我没有测试 Todoist，因为订阅费用实在太高，但是据说自然语言输入很好用。还有一些后来者：比如 GoodTask (in SetApp) 可以作为 Reminder 的强化版本。我没有考虑长期使用，所以这里不详细介绍了。&lt;/p&gt;
&lt;p&gt;最后，Todo 只是帮助 prioritize 和 focus 的工具，为了 Get Things Done，一张纸也可以做到这样。所以没有最好的 Todo App, 只有最适合你的。&lt;/p&gt;
&lt;p&gt;切忌陷入&lt;a href=&#34;https://utgd.net/article/20657&#34;&gt;效率陷阱&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;切忌花在拖拽, Tag Todo 比实际完成 Todo 花的时间还要多。&lt;/p&gt;
&lt;p&gt;切忌频繁更换工具，能用就不要动。&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>About</title>
    <link ref="alternate" href="https://yinan.me/about.html" />
    <id>about</id>
    <published>2023-06-19 17:35:38+01:00</published>
    <updated>2024-04-30 17:07:59+01:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yinan.me/hello-world&#34;&gt;中文简介&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hi, I am Yinan, a PhD student in Physics. You can access this blog via &lt;a href=&#34;https://yinan.me/&#34;&gt;yinan.me&lt;/a&gt; and &lt;a href=&#34;https://yinan.ch/&#34;&gt;yinan.ch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since I started my PhD, I have been reading and learning a lot, by writing down tons of notes and worklogs. Most of my notes are Markdown files stored in an app called &lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since almost all of my notes are going digital now, it is not a bad idea to put them online. Also, I have been writing short articles in Chinese since very young, but hadn&#39;t had the chance to collect and share them with others. I have been thinking about starting a blog for a long time. &lt;/p&gt;
&lt;p&gt;Now, I finally decided to start one, thanks to a great tool &lt;a href=&#34;https://github.com/ahui2016/pyboke&#34;&gt;PyBoke&lt;/a&gt;, which makes it very easy to create a blog using Markdown files. I know other tools like WordPress and Hugo that can do the same thing, but I like the simplicity of PyBoke. &lt;/p&gt;
&lt;h2&gt;About this blog&lt;/h2&gt;
&lt;p&gt;This blog is created by a modified version of &lt;a href=&#34;https://github.com/yinan-c/pyboke&#34;&gt;PyBoke&lt;/a&gt;, where I added features like full text RSS, navigation buttons, and abstracts on the homepage.&lt;/p&gt;
&lt;p&gt;The original version of PyBoke is created by &lt;a href=&#34;https://github.com/ahui2016&#34;&gt;ahui2016&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This blog is fully open source. All the articles in Markdown format, together with the templates I use on this website can also be found in the &lt;a href=&#34;https://github.com/yinan-c/blog&#34;&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I use the theme &lt;a href=&#34;https://newcss.net/&#34;&gt;newcss&lt;/a&gt;, and publish the blog on &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; and &lt;a href=&#34;https://pages.cloudflare.com&#34;&gt;Cloudflare Pages&lt;/a&gt;. You can also access the blog via &lt;a href=&#34;https://1nan.pages.dev/&#34;&gt;1nan.pages.dev&lt;/a&gt; or &lt;a href=&#34;https://yinan-c.github.io/&#34;&gt;yinan-c.github.io&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What will I write here?&lt;/h2&gt;
&lt;p&gt;I am interested in many things, including but not limited to: RSS, macOS softwares, Python ... As I browse the internet (mostly via RSS), interesting things will pop up and I am happy to share online here.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Twitter logo icons created by &lt;a href=&#34;https://www.flaticon.com/free-icon/twitter_3670151&#34;&gt;Md Tanvirul Haque - Flaticon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Email icon from &lt;a href=&#34;https://www.freepnglogos.com/images/email-13765.html&#34;&gt;freepnglogos.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Matodon logo by Eugen Rochko &amp;amp; other Mastodon contributors - https://blog.joinmastodon.org/, AGPL, https://commons.wikimedia.org/w/index.php?curid=120470930&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;License&lt;/h1&gt;
&lt;p&gt;The articles I write are licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;CC BY 4.0&lt;/a&gt;. You are free to: 
- &lt;strong&gt;Share&lt;/strong&gt; — copy and redistribute the material in any medium or format
- &lt;strong&gt;Adapt&lt;/strong&gt; — remix, transform, and build upon the material
for any purpose, even commercially.&lt;/p&gt;
&lt;p&gt;The licensor cannot revoke these freedoms as long as you follow the license terms.&lt;/p&gt;
&lt;p&gt;Under the following terms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Attribution&lt;/strong&gt; — You must give appropriate credit , provide a link to the license, and indicate if changes were made . You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No additional restrictions&lt;/strong&gt; — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link ref="alternate" href="https://yinan.me/hello-world.html" />
    <id>hello-world</id>
    <published>2023-06-18 18:59:53+01:00</published>
    <updated>2024-04-30 17:07:58+01:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;h2&gt;我是谁?&lt;/h2&gt;
&lt;p&gt;我叫Yinan，目前在英国读博，物理专业。本科在中科大，也是学的物理。这个博客的域名是 &lt;a href=&#34;https://yinan.me/&#34;&gt;yinan.me&lt;/a&gt; 和 &lt;a href=&#34;https://yinan.ch/&#34;&gt;yinan.ch&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;为什么写博客？&lt;/h2&gt;
&lt;p&gt;回想过去的25年，虽然有记录，写笔记的爱好，但是我还没有正经得把自己的所见所思整理，更没有发布。开始读博以后，有意识的把工作记录和日常见闻记录成文档，碎碎念积少成多，也就成为我在这个世界上来过的一点点证明。&lt;/p&gt;
&lt;p&gt;博客作为一个自己的 digital 小岛，我认为非常适合将这些见闻想法汇集。平时阅读很多文章，浏览很多新闻信息，但是大多很快就忘了，它们只是作为信息从我脑中漂过，而不是作为知识想法被我内化。组织语言记录是对这些繁杂信息的整理消化，“再创作”，也是一次自我反思。从这个意义上看，写博客或许可以帮助我学习知识，内化想法，同时可以提升表达想法的能力。&lt;/p&gt;
&lt;p&gt;我个人非常欣赏 Blog 这种“链接孤岛“的想法，同时也非常认同 open web 的愿景，觉得有价值的信息是应该被分享的，至少值得被记录下来。但是我不喜欢中心化的平台，更不用说 under sensorship 的那些，不喜欢被算法推荐的信息来源，我喜欢把数据自托管，所谓的 self-hosted。&lt;/p&gt;
&lt;p&gt;另外还有一个原因，阅读确实会让人有表达的冲动。我从小就不擅长写文章，但我在初中时仍是写了几篇中短篇小说，高中时候也会在月考作文里写写短篇，偶尔还能拿高分，就是因为当时看了很多各式各样的小说，当时的我很有表达，模仿的欲望。而现在写文章能力已经大大退步了，所以写博客权当给自己练练手，希望我能坚持。&lt;/p&gt;
&lt;h2&gt;我会写些什么&lt;/h2&gt;
&lt;p&gt;我平时喜欢折腾软件，写写脚本（因为平时科研工作有太多重复作业了），喜欢打游戏，每天刷刷 RSS，听听播客，听音乐看剧。在日常冲浪中，任何我觉得有意思，有分享意义的东西，都可能会发布在这里。又也许会把之前的一些想法笔记整理出来，发在这里。&lt;/p&gt;
&lt;h2&gt;博客用了什么&lt;/h2&gt;
&lt;p&gt;本博客的文章用 Markdown 编写。
采用了开源方案 &lt;a href=&#34;https://github.com/ahui2016/pyboke&#34;&gt;PyBoke&lt;/a&gt; 生成静态网站，自己在此基础上加了点&lt;a href=&#34;https://github.com/yinan-c/pyboke/&#34;&gt;其他功能&lt;/a&gt;，例如首页显示摘要，文章底部翻页，full text RSS 格式。使用的是 &lt;a href=&#34;https://newcss.net/&#34;&gt;newcss 主题&lt;/a&gt;，再通过 &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; 和 &lt;a href=&#34;https://pages.cloudflare.com&#34;&gt;Cloudflare Pages&lt;/a&gt; 发布。你也可以通过 &lt;a href=&#34;https://1nan.pages.dev/&#34;&gt;1nan.pages.dev&lt;/a&gt; 或 &lt;a href=&#34;https://yinan-c.github.io/&#34;&gt;yinan-c.github.io&lt;/a&gt; 访问。&lt;/p&gt;
&lt;p&gt;本博客所有源 markdown 文件，以及模板开源，托管在 &lt;a href=&#34;https://github.com/yinan-c/blog&#34;&gt;GitHub&lt;/a&gt; 上。&lt;/p&gt;
&lt;h2&gt;版权&lt;/h2&gt;
&lt;p&gt;本博客所有文章采用 &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;CC BY 4.0&lt;/a&gt; 协议。您可以自由地：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;共享&lt;/strong&gt; - 在任何媒介以任何形式复制、发行本作品 在任何用途下，甚至商业目的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;演绎&lt;/strong&gt; - 修改、转换或以本作品为基础进行创作 在任何用途下，甚至商业目的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只要你遵守许可协议条款，许可人就无法收回你的这些权利。&lt;/p&gt;
&lt;p&gt;惟须遵守下列条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;署名&lt;/strong&gt; - 您必须给出 适当的署名 ，提供指向本许可协议的链接，同时 标明是否（对原始作品）作了修改 。您可以用任何合理的方式来署名，但是不得以任何方式暗示许可人为您或您的使用背书。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;没有附加限制&lt;/strong&gt; - 您不得适用法律术语或者 技术措施 从而限制其他人做许可协议允许的事情。&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  
  <entry>
    <title>Contact Me</title>
    <link ref="alternate" href="https://yinan.me/contact.html" />
    <id>contact</id>
    <published>2023-07-08 20:53:50+01:00</published>
    <updated>2024-04-30 11:32:48+01:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;mailto:hello@yinan.me&#34;&gt;Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/yinan-c&#34;&gt;yinan-c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  
  <entry>
    <title>如何只用一个 Escape 键退出 Raycast - Get the Best of Both Worlds with Raycast and Alfred</title>
    <link ref="alternate" href="https://yinan.me/raycast-alfred.html" />
    <id>raycast-alfred</id>
    <published>2024-04-15 12:47:09+01:00</published>
    <updated>2024-04-15 12:57:11+01:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;p&gt;这篇文章主要想分享两件事，一是如何让 Raycast 能像 Alfred 一样只用一个 Escape 键退出搜索窗口，而不是每次摁一次只能一级一级得退出，二是如何利用 Deeplink 来同时使用 Raycast 和 Alfred， 发挥各自的优势。&lt;/p&gt;
&lt;h2&gt;TLDR&lt;/h2&gt;
&lt;p&gt;利用这个 &lt;a href=&#34;https://yinan.me/pics/remap_escape_in_Raycast.kmmacros&#34;&gt;Keyboard Maestro macro&lt;/a&gt; 实现在 Raycast 搜索窗口中 remap a single escape to multiple escape keys。&lt;/p&gt;
&lt;h2&gt;如果你还想听我唠叨&lt;/h2&gt;
&lt;p&gt;我不想讨论孰优孰劣，哪个是 mac 上最好用的 Launcher (LaunchBar:?)，也并不希望任何一个产品被挤压到退市，并且市场上良性竞争促使产品进步是对消费者有益的。&lt;/p&gt;
&lt;p&gt;在我的电脑上两个都装了（感谢最早让我深度体验 launcher 的 Raycast），但是目前为止还是主要在使用 Alfred，仅仅是因为能够一键呼出和退出搜索窗口，强大的 Universal Actions，更快地文件搜索和 Navigation（每次1对1老板都惊艳于我找文件的速度:D），并且我也写了几个 &lt;a href=&#34;https://yinan.me/my-open-source.html&#34;&gt;Alfred Workflow&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;但是 Raycast 也有很多优点，就比如同一个功能，eject disks, 我更偏向于 Raycast 的 hud 通知，而不是 Alfred 的系统通知（因为经常开着勿扰模式），另外比如 Show Desktop 这个 Raycast 内置插件，我并没有在 Alfred 社区找到合适的方案。如果你想要主要使用 Raycast，但也有这个烦恼， 那么你可以通过 Keyboard Maestro 设置一键退出 Raycast，如果你想要同时使用两个 Launcher，那么你可以利用 Deeplink 来实现。我会分别在下面两节讨论。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/hud.png&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;设置一键退出 Raycast&lt;/h3&gt;
&lt;p&gt;Raycast 有多级菜单，每次按 Escape 键只能退出一级，这是他们产品的特有设计，但确实大大减慢了我使用 Launcher 的速度。要实现一键退出多级菜单，Raycast 内置 Command + Escape 来回到主菜单，但是不会退出窗口（搜索完，还想让你继续搜索？），你仍然需要再次按下 escape 键才能退出。&lt;/p&gt;
&lt;p&gt;之前用过 Keyboard Maestro 映射轻按 command + W 到 长按 command + W 来防止误关窗口，所以我想到了用 Keyboard Maestro 来实现映射一个 Escape 键到多个 Escape 键，关键问题在于如何识别 Raycast 的搜索窗口正在最前。好在已经有人在论坛上讨论过并且给出了&lt;a href=&#34;https://forum.keyboardmaestro.com/t/solved-check-whether-raycast-is-running/29073/5&#34;&gt;解决方案&lt;/a&gt;，我稍微修改了一下，实现了 remap，&lt;a href=&#34;https://yinan.me/pics/remap_escape_in_Raycast.kmmacros&#34;&gt;下载地址在这儿&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;Deeplink: raycast:// 和 alfred:// 实现互相呼出&lt;/h3&gt;
&lt;p&gt;Raycast 和 Alfred 都支持 Deeplink，Raycast 中选中 command 摁下 Command + K，就可以看到 Copy Deeplink 的选项，然后你可以创建一个 Alfred Workflow 在打开这些 Raycast DeepLink 实现直接调用 Raycast command （并且整个过程 Raycast 窗口不会出现）&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/raycastdeeplink.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/alfredworkflow.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;同样地，而如果你想要在 Raycast 或者 keyboard Maestro, Shortcuts 等其他地方调用 Alfred workflow，Alfred 提供了 External Actions 来实现通过 Deeplink 或者 AppleScript 调用 Alfred 的 workflow。在 Raycast 中设置 Quicklinks 打开这个 URL 即可以实现调用 Alfred Workflow。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/alfred-deeplink.gif&#34; /&gt;&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>划词制作 Anki 卡片</title>
    <link ref="alternate" href="https://yinan.me/anki-vocabulary.html" />
    <id>anki-vocabulary</id>
    <published>2024-03-29 18:08:52+00:00</published>
    <updated>2024-03-29 18:20:23+00:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;p&gt;最近在研究背单词（奈何来英国几年了，才发现单词才是短板，惭愧），一方面我在尝试不同的背单词软件，另一方面也在折腾划词生成 Anki 卡片，来建立自己的生词库。&lt;/p&gt;
&lt;p&gt;关于背单词软件，建议大家看少数派的这篇文章以及底下的评论，&lt;a href=&#34;https://sspai.com/post/87587&#34;&gt;5 个维度、6 个 App，帮你选出最适合自己的「背单词神器」&lt;/a&gt;。或者可以网上找一些 Anki 卡片组，推荐两个制作精良的卡片组。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ankiweb.net/shared/info/1104981491&#34;&gt;4000 Essential English Words (all books) [en-en] - AnkiWeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ankiweb.net/shared/info/1498738333&#34;&gt;English Synonyms and Antonyms Workbooks - AnkiWeb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文主要介绍如何用划词工具制作 Anki 卡片，模板教程主要是根据&lt;a href=&#34;https://www.laohuang.net/20171214/anki-definition-word-template/&#34;&gt;老黄老巢&lt;/a&gt;的教程基础上进行了一些修改。&lt;/p&gt;
&lt;h2&gt;达到的效果&lt;/h2&gt;
&lt;p&gt;最终在浏览器用 ODH 划词翻译之后选择恰当的意思，可以将当前句子（附带可点击的 URL）以及对应的英，中文意思（默认先显示英语释义，点击后显示中文释义）添加到 Anki 中，并且制成 Defination-Word 和 Word-Defination 两种卡片。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;word-def&#34; src=&#34;https://yinan.me/pics/word-defination.gif&#34; /&gt;
&lt;img alt=&#34;def-word&#34; src=&#34;https://yinan.me/pics/defination-word.gif&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;需要的软件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Anki and AnkiConnect 插件&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chromewebstore.google.com/detail/online-dictionary-helper/lppjdajkacanlmpbbcdkccjkdbpllajb?hl=en-GB&#34;&gt;Online Dictionary Helper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yinan.me/pics/Antimoon.apkg&#34;&gt;模板下载&lt;/a&gt;，在&lt;a href=&#34;https://arc.net/l/quote/oqpbgclk&#34;&gt;原4.0模板&lt;/a&gt; 的基础上略有修改&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;配置 ODH&lt;/h2&gt;
&lt;p&gt;在此，我仅仅分享一下合适我的配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我不需要全部的意思，只需要符合当前语境的意思，所以选择了 Consice 而不是 Glossary or Collins&lt;/li&gt;
&lt;li&gt;我需要中文在我点击的时候显示出来，所以我选择了 Collins EN-CN 字典&lt;/li&gt;
&lt;li&gt;URL： 在我想看原文上下文的时候点击 Sentence 部分即可跳转&lt;/li&gt;
&lt;li&gt;add-dw: 这一项不为0代表同时添加 Definition-Word 卡片&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&#34;odh&#34; src=&#34;https://yinan.me/pics/odh.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;具体每个配置的详细意思可以参考这篇博客，&lt;a href=&#34;https://arc.net/l/quote/oqpbgclk&#34;&gt;Antimoon 划词助手兼容模板 3.0 - 老黄老巢&lt;/a&gt; 或者项目的 &lt;a href=&#34;https://github.com/ninja33/ODH&#34;&gt;GitHub 主页&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;修改卡片显示项目(可选)&lt;/h2&gt;
&lt;p&gt;上面提到我在老黄老巢的模板上进行了一些修改（比如把 glossary 改成 consice 只显示一种释义，比如增加 URL 和默认隐藏中文释义），主要是为了适应我的需求，你也可以根据你的使用习惯在 Card-type 中进行修改卡片模板。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/card-type.png&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Further Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ninja33/ODH&#34;&gt;https://github.com/ninja33/ODH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1zW411a7Dz/?p=1&#34;&gt;背单词软件Anki之Antimoon特色模板教程(definition-word卡片自动生成)_哔哩哔哩_bilibili&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://arc.net/l/quote/oqpbgclk&#34;&gt;Antimoon 划词助手兼容模板 3.0 - 老黄老巢&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.laohuang.net/20171214/anki-definition-word-template/&#34;&gt;请找一个解释要配的上我这个单词 — 老黄老巢&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.antimoon.com/how/srs.htm&#34;&gt;Antimoon - How to Learn English effectively&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sspai.com/post/87587&#34;&gt;5 个维度、6 个 App，帮你选出最适合自己的「背单词神器」&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  
  <entry>
    <title>Friends</title>
    <link ref="alternate" href="https://yinan.me/Friends.html" />
    <id>Friends</id>
    <published>2024-03-26 16:30:50+00:00</published>
    <updated>2024-03-26 16:30:50+00:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;p&gt;暂时空空如也。&lt;/p&gt;
&lt;p&gt;最近开始考虑增加友链，先准备从我订阅的 RSS 中发送一些申请。&lt;/p&gt;
&lt;p&gt;如果你有兴趣，也欢迎发&lt;a href=&#34;mailto:yinan.email@gmail.com&#34;&gt;邮件&lt;/a&gt;。&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Avatars</title>
    <link ref="alternate" href="https://yinan.me/Avatars.html" />
    <id>Avatars</id>
    <published>2024-03-26 15:00:27+00:00</published>
    <updated>2024-03-26 15:10:55+00:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;p&gt;我的 GitHub 和博客头像是这个，朋友都说跟我有点神似 :)&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;avatar&#34; src=&#34;https://yinan.me/pics/old_avatar.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这其实是&lt;a href=&#34;https://notion-avatar.vercel.app/&#34;&gt;这个网站&lt;/a&gt;生成的 Notion 风格头像。&lt;/p&gt;
&lt;p&gt;另外分享一个在刷推发现的 &lt;a href=&#34;https://txstc55.github.io/ugly-avatar/&#34;&gt;Ugly Avatar&lt;/a&gt;，我生成了这个用它作为我的 v2ex 账号头像。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;ugly-avatar&#34; src=&#34;https://yinan.me/pics/avatar.png&#34; /&gt;&lt;/p&gt;</content>
  </entry>
  

</feed>