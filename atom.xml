<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>1nan</title>
  <link ref="self" href=""/>
  <link ref="alternate" href="https://yinan.me/"/>
  <updated></updated>
  <author>
    <name>Yinan</name>
  </author>
  <id>ba15f2bcfa5336d8d2f005c8f0aa7951c3b52e50</id>

  
  <entry>
    <title>Avatars</title>
    <link ref="alternate" href="https://yinan.me/Avatars.html" />
    <id>Avatars</id>
    <published>2024-03-26 15:00:27+00:00</published>
    <updated>2024-03-26 15:10:55+00:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;p&gt;我的 GitHub 和博客头像是这个，朋友都说跟我有点神似 :)&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;avatar&#34; src=&#34;https://yinan.me/pics/old_avatar.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这其实是&lt;a href=&#34;https://notion-avatar.vercel.app/&#34;&gt;这个网站&lt;/a&gt;生成的 Notion 风格头像。&lt;/p&gt;
&lt;p&gt;另外分享一个在刷推发现的 &lt;a href=&#34;https://txstc55.github.io/ugly-avatar/&#34;&gt;Ugly Avatar&lt;/a&gt;，我生成了这个用它作为我的 v2ex 账号头像。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;ugly-avatar&#34; src=&#34;https://yinan.me/pics/avatar.png&#34; /&gt;&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>About</title>
    <link ref="alternate" href="https://yinan.me/about.html" />
    <id>about</id>
    <published>2023-06-19 17:35:38+01:00</published>
    <updated>2024-03-21 16:38:41+00:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;p&gt;Hi, I am Yinan, a PhD student in Physics.&lt;/p&gt;
&lt;p&gt;Since I started my PhD, I have been reading and learning a lot, by writing down tons of notes and worklogs. Most of my notes are Markdown files stored in an app called &lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since almost all of my notes are going digital now, it is not a bad idea to put them online. Also, I have been writing short articles in Chinese since very young, but hadn&#39;t had the chance to collect and share them with others. I have been thinking about starting a blog for a long time. &lt;/p&gt;
&lt;p&gt;Now, I finally decided to start one, thanks to a great tool &lt;a href=&#34;https://github.com/ahui2016/pyboke&#34;&gt;PyBoke&lt;/a&gt;, which makes it very easy to create a blog using Markdown files. I know other tools like WordPress and Hugo that can do the same thing, but I like the simplicity of PyBoke. &lt;/p&gt;
&lt;h2&gt;About this blog&lt;/h2&gt;
&lt;p&gt;This blog is created by a modified version of &lt;a href=&#34;https://github.com/yinan-c/pyboke&#34;&gt;PyBoke&lt;/a&gt;, where I added features like full text RSS, navigation buttons, and abstracts on the homepage.&lt;/p&gt;
&lt;p&gt;The original version of PyBoke is created by &lt;a href=&#34;https://github.com/ahui2016&#34;&gt;ahui2016&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This blog is fully open source. All the articles in Markdown format, together with the templates I use on this website can also be found in the &lt;a href=&#34;https://github.com/yinan-c/blog&#34;&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I use the theme &lt;a href=&#34;https://newcss.net/&#34;&gt;newcss&lt;/a&gt;, and publish the blog on &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What will I write here?&lt;/h2&gt;
&lt;p&gt;I am interested in many things, including but not limited to: RSS, macOS softwares, Python ... As I browse the internet (mostly via RSS), interesting things will pop up and I am happy to share online here.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Twitter logo icons created by &lt;a href=&#34;https://www.flaticon.com/free-icon/twitter_3670151&#34;&gt;Md Tanvirul Haque - Flaticon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Email icon from &lt;a href=&#34;https://www.freepnglogos.com/images/email-13765.html&#34;&gt;freepnglogos.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Matodon logo by Eugen Rochko &amp;amp; other Mastodon contributors - https://blog.joinmastodon.org/, AGPL, https://commons.wikimedia.org/w/index.php?curid=120470930&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;License&lt;/h1&gt;
&lt;p&gt;The articles I write are licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;CC BY 4.0&lt;/a&gt;. You are free to: 
- &lt;strong&gt;Share&lt;/strong&gt; — copy and redistribute the material in any medium or format
- &lt;strong&gt;Adapt&lt;/strong&gt; — remix, transform, and build upon the material
for any purpose, even commercially.&lt;/p&gt;
&lt;p&gt;The licensor cannot revoke these freedoms as long as you follow the license terms.&lt;/p&gt;
&lt;p&gt;Under the following terms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Attribution&lt;/strong&gt; — You must give appropriate credit , provide a link to the license, and indicate if changes were made . You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No additional restrictions&lt;/strong&gt; — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  
  <entry>
    <title>Organizing /Applications folder in macOS</title>
    <link ref="alternate" href="https://yinan.me/categorize-applications.html" />
    <id>categorize-applications</id>
    <published>2024-03-15 15:48:39+00:00</published>
    <updated>2024-03-17 21:59:01+00:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;p&gt;I struggle sometimes with hundreds of apps installed in my Applications folder.&lt;/p&gt;
&lt;p&gt;For frequently-used apps, Alfred is my best friend.
For most of the time, I can open the app I want within a few keystrokes.&lt;/p&gt;
&lt;p&gt;But for other apps I use occationaly, it is hard to remember the name every time, so I can only skim through the Applications folder to find the app I need. But it&#39;s hard to get the functionality of each app just by looking through the icons and names, it is like find a needle in a haystack. &lt;/p&gt;
&lt;p&gt;Although you can always group or sort the apps to help you find what you need, like the tip shown &lt;a href=&#34;https://eshop.macsales.com/blog/40569-quick-tip-arrange-your-mac-apps-by-category-in-finder/&#34;&gt;here&lt;/a&gt; to group them by default category, I still feel it&#39;s not enough for massive apps since the default categories are too broad.&lt;/p&gt;
&lt;p&gt;So I decided to categorize them further myself, similar idea to how iOS does it in the App Library.&lt;/p&gt;
&lt;p&gt;I came across this blog post by &lt;a href=&#34;http://blog.hyperjeff.net/?p=44&#34;&gt;Jeff&lt;/a&gt; where he shared his way of categorizing the /Applications folder. As far as I appreciate the idea behind the post, there is some problems if you do exactly as he did as the time of writing.&lt;/p&gt;
&lt;p&gt;The reason is Apple would not allow you move around stock apps(see picture below). &lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/Error_move_settings.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Even some third-party apps might not work properly if you move them. For example, applescript like the following would break if you move iTerm away from /Applications folder (This is the applescript that you can change default terminal to iTerm in Alfred&#39;s preferences):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;on alfred_script(q)
    tell application &#34;iTerm&#34;
        activate
        tell current window
            create tab with default profile
            tell current session
                write text q
            end tell
        end tell
    end tell
end alfred_script&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Moreover, package installers(.pkg, not .dmg) would by default put the app to /Applications folder, and there might be problem if move them according to a comment in this &lt;a href=&#34;https://superuser.com/questions/76094/organizing-the-mac-os-x-applications-directory&#34;&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All this tells us it is better to leave as it is in the /Applications folder. So a good way to deal with this is to create a new folder and put the aliases of all the apps in the new folder. I use &#39;~/Applications&#39;, and create alias are as simple as just dragging the apps to the new folder. An easy way to start - You can borrow the categories from the default categories groups using the tips &lt;a href=&#34;https://eshop.macsales.com/blog/40569-quick-tip-arrange-your-mac-apps-by-category-in-finder/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/finder_info.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;⌘ + J in the /Applications folder, group the apps by the default categories, and then move the apps in each group to different subfolders in the new folder. The groups might be too broad. Then you can start from there to modify the categories to your own preference.&lt;/p&gt;
&lt;p&gt;Okay, now app alias are in different subfolders, we have the confidence to find the non-frequently-used apps more easily. But what if there is a new app installed? What if we want to remove an app? To keep the system running, an important thing is to keep the alias in the ~/Applications folder up-to-date.&lt;/p&gt;
&lt;p&gt;For this, you can use Hazel or some automation tools (Automator, Keyboard Maestro, or other folder watcher) to script the process of creating alias and moving them to ~/Applications. Here is an example of how to do it with Hazel for the new app installed: &lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/Hazel_rule.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now everytime there is a new app installed, Hazel will create an alias in the ~/Applications folder. Just like put it in app inbox, I can review the app and decide which category it belongs to or just toss it to keep the total number reasonable. Unfortunately, with Hazel, I don&#39;t find a good way to automatically remove the correspdonding alias when the app is removed. But I have made a &lt;a href=&#34;https://yinan.me/pics/Update-alias-when-trashing-apps.kmmacros&#34;&gt;keyboard maestro macro&lt;/a&gt; to do this, inspired by this &lt;a href=&#34;https://forum.keyboardmaestro.com/t/solved-find-specific-files-inside-folders-and-sub-folders-and-then-copy-them/33042&#34;&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/km_macro.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I did this because it bothers me sometimes, when I want to find a specific app but I forgot the name, and finding it without hierarchy is difficult. At the end of the day, you can always delete the apps you don&#39;t use to limit the number of apps. Then the flat structure of the /Applications folder is not a problem anymore.&lt;/p&gt;
&lt;p&gt;If there aren&#39;t many apps at the first place or even there are that it does not bother you, there is no need to do this. Just as the saying goes, if it ain&#39;t broke, don&#39;t fix it.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>推荐一些 macOS 应用</title>
    <link ref="alternate" href="https://yinan.me/mac-apps.html" />
    <id>mac-apps</id>
    <published>2024-03-15 10:56:04+00:00</published>
    <updated>2024-03-15 11:07:19+00:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;p&gt;想写这个很久了，列表保持更新，括号内是我之前使用过的同类替代品。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://alfredapp.com/&#34;&gt;Alfred&lt;/a&gt;（目前我最喜欢的应用，Raycast 也是一个非常好的免费替代品）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.keyboardmaestro.com/&#34;&gt;Keyboard Maestro&lt;/a&gt;（一个非常强大的自动化 App）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.corecode.io/macupdater/&#34;&gt;MacUpdater&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://apps.apple.com/us/app/velja/id1607635845?mt=12&#34;&gt;Velja&lt;/a&gt;（浏览器选择器，付费的有 &lt;a href=&#34;https://apps.apple.com/us/app/openin-4-advanced-link-handler/id1643649331?mt=12&amp;amp;uo=4&amp;amp;at=10l4tL&amp;amp;ct=searchlink&#34;&gt;Openin&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.popclip.app/&#34;&gt;Popclip&lt;/a&gt;（对选中文本操作，有各种 extension，每天用它打开 URL, Google, &lt;a href=&#34;https://brettterpstra.com/projects/searchlink/&#34;&gt;searchlink&lt;/a&gt;, 添加到 Omnifocus 等）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://brettterpstra.com/projects/searchlink/&#34;&gt;SearchLink&lt;/a&gt; (不能严格算是一个 App，添加 markdown 中的 url 时很有用，我是和 Popclip 一起使用)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://netnewswire.com/&#34;&gt;NetNewsWire&lt;/a&gt; (尝试过 Reeder，但我更喜欢 NNW)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.devontechnologies.com/apps/devonthink&#34;&gt;DEVONthink&lt;/a&gt;, &lt;a href=&#34;https://www.zotero.org/&#34;&gt;Zotero&lt;/a&gt;（文档和文献应用，Anybox 是一个不错的替代品）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://streaksapp.com/&#34;&gt;Streaks app&lt;/a&gt;（习惯养成，保持我的日常运转）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Ji4n1ng/OpenInTerminal&#34;&gt;OpenInTerminal-Lite&lt;/a&gt; 和 OpenInEditor-Lite（位于 Finder工具栏上的应用，可在终端中打开特定目录）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://magicquit.com/&#34;&gt;MagicQuit&lt;/a&gt;、&lt;a href=&#34;https://swiftquit.com/&#34;&gt;SwiftQuit&lt;/a&gt;、&lt;a href=&#34;https://amicoapps.com/app/quitall/&#34;&gt;QuitAll&lt;/a&gt;、&lt;a href=&#34;https://marco.org/apps&#34;&gt;Quitter&lt;/a&gt;（自动关闭应用）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://Wins.cool&#34;&gt;Wins.cool&lt;/a&gt;, Lasso, emmetapp, Moom（窗口管理，替代品可以是 Rectangle）&lt;/li&gt;
&lt;li&gt;MonitorControl（单独控制不同显示器的亮度）&lt;/li&gt;
&lt;li&gt;Karabiner Elements（对我来说是必不可少的 key-binding 应用，比如 shift 切换中英文，CAPS LOCK remap）&lt;/li&gt;
&lt;li&gt;Input Source Pro, SwitchKey, ShowyEdge（根据应用自动切换输入法，在屏幕边缘显示当前输入法）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.homerow.app/&#34;&gt;Homerow&lt;/a&gt; 和 &lt;a href=&#34;https://wooshy.app/&#34;&gt;Wooshy&lt;/a&gt;（用键盘代替鼠标操作）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bahoom.com/hyperswitch&#34;&gt;HyperSwitch&lt;/a&gt; 和 &lt;a href=&#34;https://bahoom.com/hyperdock&#34;&gt;HyperDock&lt;/a&gt;（最近更新支持 Sonoma，App/Window Switcher，还有 Hotkeys, Alt-Tab 和 Manico, Raycast 也能给不同应用设置快捷键）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://apps.apple.com/us/app/code-piper/id1669959741?mt=12&amp;amp;uo=4&amp;amp;at=10l4tL&amp;amp;ct=searchlink&#34;&gt;CodePiper&lt;/a&gt;（自动从短信中复制2FA）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xiaogdgenuine/Doll&#34;&gt;Doll: A mac app to help monitor your app badges!&lt;/a&gt; (在菜单栏监控 Slack 和微信消息)&lt;/li&gt;
&lt;li&gt;Dropover, dropzone, yoink（drag and drop stash）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://backupstatus.app/&#34;&gt;Backup Status app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://commandqapp.com/&#34;&gt;CommandQ&lt;/a&gt; 和 SlowerQuitApps（防止意外使用CommandQ，KM也可以写脚本做到这一点）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.irradiatedsoftware.com/labs/&#34;&gt;FinderMinder&lt;/a&gt;（固定 Finder 窗口大小）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hmarr/vitals&#34;&gt;Vitals&lt;/a&gt;, iStats Menus（菜单栏上显示不同 app CPU 使用率）&lt;/li&gt;
&lt;li&gt;MediaMate（高颜值，显示当前播放歌曲）&lt;/li&gt;
&lt;li&gt;Hazel（文件自动化）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://apps.apple.com/gb/app/rapidmg/id6451349778?mt=12&#34;&gt;Rapidmg&lt;/a&gt; （一键安装dmg，无需拖动弹出等操作）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://espanso.org/&#34;&gt;Espanso&lt;/a&gt;（开源 Text expander）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stuntsoftware.com/reflex/&#34;&gt;Reflex&lt;/a&gt;（媒体键定向到 Spotify 和 Apple Music）&lt;/li&gt;
&lt;li&gt;Onyx, HiDock（清理 mac，隐藏 Dock）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://apps.apple.com/gb/app/subscriptions-track-expenses/id1577082754&#34;&gt;Subscriptions&lt;/a&gt;（订阅管理，可以和 App Store 联动）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ts1/BLEUnlock&#34;&gt;BLEUnlock&lt;/a&gt;（通过 iPhone、Apple Watch 来锁定和解锁 Mac。）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.irradiatedsoftware.com/labs/#shortcutdetective&#34;&gt;ShortcutDetective&lt;/a&gt;（停更了，但仍然能用）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://apps.apple.com/gb/app/sofa-downtime-organizer/id1276554886&#34;&gt;Sofa&lt;/a&gt;, &lt;a href=&#34;https://apps.apple.com/gb/app/film-noir-for-trakt-just-watch/id1528417240&#34;&gt;FilmNoir&lt;/a&gt;, &lt;a href=&#34;https://apps.apple.com/gb/app/gametrack/id1136800740&#34;&gt;GameTrack&lt;/a&gt;（书影音记录）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.apptorium.com/screenfocus&#34;&gt;ScreenFocus App&lt;/a&gt; 和 &lt;a href=&#34;https://hazeover.com/&#34;&gt;Hazeover&lt;/a&gt;（使非聚焦的应用和显示器变暗）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cleanclip.cc/&#34;&gt;CleanClip&lt;/a&gt;, &lt;a href=&#34;https://apps.apple.com/gb/app/pastenow-instant-clipboard/id1552536109&#34;&gt;PasteNow&lt;/a&gt;（剪贴板管理器，我也经常使用 Alfred）&lt;/li&gt;
&lt;li&gt;DaisyDisk（分析磁盘空间）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mowglii.com/itsycal/&#34;&gt;Itsycal&lt;/a&gt;（小巧的菜单栏日历应用）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://getlater.app/&#34;&gt;Later&lt;/a&gt;（暂时保存当前应用和会话）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://goodsnooze.gumroad.com/l/macwhisper&#34;&gt;MacWhisper&lt;/a&gt;（最佳音频转文字应用）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marta.sh/&#34;&gt;Marta&lt;/a&gt;（双面板 Finder 替代品，另有 QSpace 和 Forklift）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://omnivore.app/&#34;&gt;Omnivore&lt;/a&gt;（开源的稍后阅读）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://apps.apple.com/us/app/stempel-create-new-files/id1638437641?mt=12&amp;amp;uo=4&amp;amp;at=10l4tL&amp;amp;ct=searchlink&#34;&gt;Stempel&lt;/a&gt;（在右键菜单中以不同格式/预设来创建新文件）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是可以在 SetApp 中找到的应用，有些是订阅，大多数是一次性付费应用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Airbuddy（iOS Airpods 体验）&lt;/li&gt;
&lt;li&gt;Timing App&lt;/li&gt;
&lt;li&gt;Bartender&lt;/li&gt;
&lt;li&gt;BusyCal&lt;/li&gt;
&lt;li&gt;Canary Mail&lt;/li&gt;
&lt;li&gt;Cleanshot X（替代品 Shottr）&lt;/li&gt;
&lt;li&gt;Focus and Session（专注）&lt;/li&gt;
&lt;li&gt;Time Out（为了眼睛健康）&lt;/li&gt;
&lt;li&gt;HookMark（链接一切）&lt;/li&gt;
&lt;li&gt;HoudahSpot（全盘全文搜索，我更多用 Alfred、Devonthink 和 Foxtrot）&lt;/li&gt;
&lt;li&gt;Mission Control Plus&lt;/li&gt;
&lt;li&gt;Numi，Soulver（计算器）&lt;/li&gt;
&lt;li&gt;OneSwitch（我经常用来清洁电脑，替代品：OnlySwitch, KeyboardCleanTool）&lt;/li&gt;
&lt;li&gt;SnippetsLab&lt;/li&gt;
&lt;li&gt;Swish（触控板窗口管理）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;欢迎在评论中分享你的推荐。&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link ref="alternate" href="https://yinan.me/hello-world.html" />
    <id>hello-world</id>
    <published>2023-06-18 18:59:53+01:00</published>
    <updated>2024-02-01 22:51:50+00:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;h2&gt;我是谁?&lt;/h2&gt;
&lt;p&gt;我叫Yinan，目前在英国读博，物理专业。本科在中科大，也是学的物理。&lt;/p&gt;
&lt;h2&gt;为什么写博客？&lt;/h2&gt;
&lt;p&gt;回想过去的25年，虽然有记录，写笔记的爱好，但是我还没有正经得把自己的所见所思整理，更没有发布。开始读博以后，有意识的把工作记录和日常见闻记录成文档，碎碎念积少成多，也就成为我在这个世界上来过的一点点证明。&lt;/p&gt;
&lt;p&gt;博客作为一个自己的 digital 小岛，我认为非常适合将这些见闻想法汇集。平时阅读很多文章，浏览很多新闻信息，但是大多很快就忘了，它们只是作为信息从我脑中漂过，而不是作为知识想法被我内化。组织语言记录是对这些繁杂信息的整理消化，“再创作”，也是一次自我反思。从这个意义上看，写博客或许可以帮助我学习知识，内化想法，同时可以提升表达想法的能力。&lt;/p&gt;
&lt;p&gt;我个人非常欣赏 Blog 这种“链接孤岛“的想法，同时也非常认同 open web 的愿景，觉得有价值的信息是应该被分享的，至少值得被记录下来。但是我不喜欢中心化的平台，更不用说 under sensorship 的那些，不喜欢被算法推荐的信息来源，我喜欢把数据自托管，所谓的 self-hosted。&lt;/p&gt;
&lt;p&gt;另外还有一个原因，阅读确实会让人有表达的冲动。我从小就不擅长写文章，但我在初中时仍是写了几篇中短篇小说，高中时候也会在月考作文里写写短篇，偶尔还能拿高分，就是因为当时看了很多各式各样的小说，当时的我很有表达，模仿的欲望。而现在写文章能力已经大大退步了，所以写博客权当给自己练练手，希望我能坚持。&lt;/p&gt;
&lt;h2&gt;我会写些什么&lt;/h2&gt;
&lt;p&gt;我平时喜欢折腾软件，写写脚本（因为平时科研工作有太多重复作业了），喜欢打游戏，每天刷刷 RSS，听听播客，听音乐看剧。在日常冲浪中，任何我觉得有意思，有分享意义的东西，都可能会发布在这里。又也许会把之前的一些想法笔记整理出来，发在这里。&lt;/p&gt;
&lt;h2&gt;博客用了什么&lt;/h2&gt;
&lt;p&gt;本博客的文章用 Markdown 编写。
采用了开源方案 &lt;a href=&#34;https://github.com/ahui2016/pyboke&#34;&gt;PyBoke&lt;/a&gt; 生成静态网站，自己在此基础上加了点&lt;a href=&#34;https://github.com/yinan-c/pyboke/&#34;&gt;其他功能&lt;/a&gt;，例如首页显示摘要，文章底部翻页，full text RSS 格式。使用的是 &lt;a href=&#34;https://newcss.net/&#34;&gt;newcss 主题&lt;/a&gt;，再通过 &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; 发布。&lt;/p&gt;
&lt;p&gt;本博客所有源 markdown 文件，以及模板开源，托管在 &lt;a href=&#34;https://github.com/yinan-c/blog&#34;&gt;GitHub&lt;/a&gt; 上。&lt;/p&gt;
&lt;h2&gt;版权&lt;/h2&gt;
&lt;p&gt;本博客所有文章采用 &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;CC BY 4.0&lt;/a&gt; 协议。您可以自由地：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;共享&lt;/strong&gt; - 在任何媒介以任何形式复制、发行本作品 在任何用途下，甚至商业目的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;演绎&lt;/strong&gt; - 修改、转换或以本作品为基础进行创作 在任何用途下，甚至商业目的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只要你遵守许可协议条款，许可人就无法收回你的这些权利。&lt;/p&gt;
&lt;p&gt;惟须遵守下列条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;署名&lt;/strong&gt; - 您必须给出 适当的署名 ，提供指向本许可协议的链接，同时 标明是否（对原始作品）作了修改 。您可以用任何合理的方式来署名，但是不得以任何方式暗示许可人为您或您的使用背书。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;没有附加限制&lt;/strong&gt; - 您不得适用法律术语或者 技术措施 从而限制其他人做许可协议允许的事情。&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  
  <entry>
    <title>How to let your shell to remember your commands</title>
    <link ref="alternate" href="https://yinan.me/shell-auto-suggestions.html" />
    <id>shell-auto-suggestions</id>
    <published>2024-02-01 17:09:21+00:00</published>
    <updated>2024-02-01 22:26:17+00:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;p&gt;Whenever you got a new machine, there&#39;s always endless configurations porting, codes compilations and packages installations. It is crutial step to make the new machine meets your habits.&lt;/p&gt;
&lt;p&gt;Recently, I got access to a new supercomputer for a limited amount of time, I started using it without much configuration. Soon I found myself missing the convenience of auto-suggestion for commands, which I got used to in prevously machines I&#39;ve wored on.&lt;/p&gt;
&lt;p&gt;Auto-suggestion in your shell is basically a plugin/extension that remembers your commands history and provide suggestions when you type in the first few letters of a command. When you find yourself frequently using the same commands (such as &lt;code&gt;ssh&lt;/code&gt; to a specific server), it could be really useful.&lt;/p&gt;
&lt;p&gt;This is how the suggestions will look like (I&#39;m using zsh-autosuggestions here):&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/zsh.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So this article is mainly to give recommendations for both zsh and bash users on how to configure the shell to remember your commands.&lt;/p&gt;
&lt;h2&gt;1. zsh-autosuggestions for zsh&lt;/h2&gt;
&lt;p&gt;On my mac, zsh is the default shell, the plugin &lt;code&gt;zsh-autosuggestions&lt;/code&gt; is what I want to recommend here. It suggests commands when you type in a zsh shell, and you can simply press the right arrow key to accept the suggestion.&lt;/p&gt;
&lt;p&gt;To install it, you can follow the instructions on their &lt;a href=&#34;https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md&#34;&gt;github repo&lt;/a&gt;. You can use Antigen, Oh My Zsh, Homebrew or manually install it.&lt;/p&gt;
&lt;p&gt;I use oh-my-zsh for managing my zsh configurations. Actually I&#39;m using a rather minimal configuration of oh-my-zsh, which consists only 2 plugins. These are the lines to configure oh-my-zsh in my &lt;code&gt;~/.zshrc&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
export ZSH=&#34;$HOME/.oh-my-zsh&#34;
ZSH_THEME=&#34;alanpeabody&#34;
plugins=(git zsh-syntax-highlighting zsh-autosuggestions)
source $ZSH/oh-my-zsh.sh&lt;/code&gt;
As you can see, to install &lt;code&gt;zsh-autosuggestions&lt;/code&gt; you just need to add it to the &lt;code&gt;plugins&lt;/code&gt; list, separated by a space, tab, or newline.&lt;/p&gt;
&lt;p&gt;There are definitely more to explore in oh-my-zsh, but I&#39;m not going to talk about them in detail here. If you&#39;re interested in more configurations, you can always check out the &lt;a href=&#34;https://ohmyz.sh/&#34;&gt;official website&lt;/a&gt; or their &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh&#34;&gt;github repo&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(PS. I also recommend &lt;a href=&#34;https://github.com/sindresorhus/pure&#34;&gt;pure&lt;/a&gt; as a beautiful and minimal ZSH prompt theme, and it is developed and maintained by my favorite open source and mac apps developer Sindre Sorhus.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;2. ble.sh for bash&lt;/h2&gt;
&lt;p&gt;For some linux machines, bash is default shell. If you are using bash, I would recommend &lt;a href=&#34;https://github.com/akinomyoga/ble.sh&#34;&gt;ble.sh&lt;/a&gt;, which stands for Bash Line Editor.&lt;/p&gt;
&lt;p&gt;I was looking for a way to let my bash shell to remember my commands, and I found there is a &lt;a href=&#34;https://github.com/ohmybash/oh-my-bash&#34;&gt;oh-my-bash&lt;/a&gt; repo, which is the counterpart of oh-my-zsh, for managing your bash configuration. However, I couldn&#39;t find a easy-to-use auto-suggestion plugin that can be installed via oh-my-bash.&lt;/p&gt;
&lt;p&gt;Then I found &lt;a href=&#34;https://github.com/akinomyoga/ble.sh&#34;&gt;ble.sh&lt;/a&gt;, and you can even try it first without installation.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone --recursive --depth 1 --shallow-submodules https://github.com/akinomyoga/ble.sh.git
make -C ble.sh
source ble.sh/out/ble.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then try typing in a few commands, you&#39;ll find it achieves the same functionality as &lt;code&gt;zsh-autosuggestions&lt;/code&gt;, it even gives suggestions on commands that you never used before.&lt;/p&gt;
&lt;p&gt;If you like it, you can quickly install it via running the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone --recursive --depth 1 --shallow-submodules https://github.com/akinomyoga/ble.sh.git
make -C ble.sh install PREFIX=~/.local
echo &#39;source ~/.local/share/blesh/ble.sh&#39; &amp;gt;&amp;gt; ~/.bashrc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I hope some of you will find this article useful, and I&#39;m also looking forward to hearing your recommendations on other useful plugins or your shell configurations.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>如何让 Shell 记住常用命令</title>
    <link ref="alternate" href="https://yinan.me/shell-auto-suggestions-zh.html" />
    <id>shell-auto-suggestions-zh</id>
    <published>2024-02-01 18:04:18+00:00</published>
    <updated>2024-02-01 22:26:17+00:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;p&gt;每当配置一台新服务器时，迁移配置、编译代码和安装包，都是最一开始要做的事情。
最近，我们组有了一台新的超算，但给的时间有限，于是我几乎没有配置，登录上编译完软件包就开始用了。然而，在我一而再再而三重复输入类似的命令后，我发现自己已然适应，甚至完全离不开命令自动补全带给我的便利了。&lt;/p&gt;
&lt;p&gt;Shell 自动建议是在你输入一条命令的前几个字母时，从命令行历史中给出补全建议。如果你需要经常输入相同或类似的命令时（例如，ssh到特定的服务器），那么这个功能会非常有用，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/zsh.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;因此，本文主要是给 zsh 和 bash 用户推荐 Shell 记住常用历史命令的插件，以及如何安装和配置它们。&lt;/p&gt;
&lt;h2&gt;1. ZSH 用户：zsh-autosuggestions&lt;/h2&gt;
&lt;p&gt;在 Mac 上，zsh 是默认的 shell，我推荐使用 &lt;code&gt;zsh-autosuggestions&lt;/code&gt; 插件。如其名，它会在你输入 zsh 命令时自动给出建议，然后按右箭头键接受建议。&lt;/p&gt;
&lt;p&gt;可以按照其 &lt;a href=&#34;(https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md)&#34;&gt;github repo&lt;/a&gt; 上的说明进行安装，安装方式有 Antigen、Oh My Zsh、Homebrew 或手动安装。&lt;/p&gt;
&lt;p&gt;我使用的是 oh-my-zsh 来管理 zsh 配置，这是我在 &lt;code&gt;~/.zshrc&lt;/code&gt; 中有关 oh-my-zsh 的代码，我目前使用得很简单，只有两个插件：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;export ZSH=&#34;$HOME/.oh-my-zsh&#34;
ZSH_THEME=&#34;alanpeabody&#34;
plugins=(git zsh-syntax-highlighting zsh-autosuggestions)
source $ZSH/oh-my-zsh.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以看到安装方式十分简单，只需把 &lt;code&gt;zsh-autosuggestions&lt;/code&gt; 加入到 &lt;code&gt;plugins&lt;/code&gt; 列表中，用空格、制表符或换行符分隔不同的插件即可。&lt;/p&gt;
&lt;p&gt;当然，oh-my-zsh 还有很多其他可玩的地方，不管是主题还是插件，这里就不详细介绍了。如果你对更多配置感兴趣，可以查看 &lt;a href=&#34;https://ohmyz.sh/&#34;&gt;官方网站&lt;/a&gt; 或他们的 &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh&#34;&gt;github repo&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;（PS. 另外我还推荐 &lt;a href=&#34;https://github.com/sindresorhus/pure&#34;&gt;pure&lt;/a&gt; 作为一个漂亮而简洁的 ZSH 提示符主题，它也是我最崇拜的开源和 Mac 应用程序开发者 Sindre Sorhus 开发维护的。）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;2. BASH 用户：ble.sh&lt;/h2&gt;
&lt;p&gt;对于一些 Linux 机器，bash 是默认的 shell。如果你使用 bash，我推荐 &lt;a href=&#34;https://github.com/akinomyoga/ble.sh&#34;&gt;ble.sh&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我在寻找让 bash 记住常用命令的方法时，发现了 &lt;a href=&#34;https://github.com/ohmybash/oh-my-bash&#34;&gt;oh-my-bash&lt;/a&gt;，和 oh my zsh 对应，它可以用来管理 bash 配置，但我没有找到一个可以通过它轻松安装的 auto suggestions 插件。&lt;/p&gt;
&lt;p&gt;然后我发现了 ble.sh，它甚至提供了试用命令，你可以不用安装的情况下暂时使用它，只需运行以下命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone --recursive --depth 1 --shallow-submodules https://github.com/akinomyoga/ble.sh.git
make -C ble.sh
source ble.sh/out/ble.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当你尝试输入一些命令，你会发现它和 &lt;code&gt;zsh-autosuggestions&lt;/code&gt; 的基本功能是一样的，甚至会给出你从未使用过的命令的建议。&lt;/p&gt;
&lt;p&gt;如果你喜欢它，当然也可以通过运行以下命令快速安装：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone --recursive --depth 1 --shallow-submodules https://github.com/akinomyoga/ble.sh.git
make -C ble.sh install PREFIX=~/.local
echo &#39;source ~/.local/share/blesh/ble.sh&#39; &amp;gt;&amp;gt; ~/.bashrc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;希望本文对你有用，也期待听到你对其他插件或 shell 配置的建议。&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>My App Defaults</title>
    <link ref="alternate" href="https://yinan.me/my-defaults.html" />
    <id>my-defaults</id>
    <published>2023-11-09 21:30:40+00:00</published>
    <updated>2023-11-09 23:01:18+00:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;p&gt;Inspired by &lt;a href=&#34;https://listen.hemisphericviews.com/097&#34;&gt;Hemispheric Views 097 - Duel of the Defaults!&lt;/a&gt; and blog posts by &lt;a href=&#34;https://defaults.rknight.me/&#34;&gt;many&lt;/a&gt;. I would like to write my own defaults too.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;📮 &lt;strong&gt;Mail Server&lt;/strong&gt;: iCloud and Gmail&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;📨 &lt;strong&gt;Mail Client&lt;/strong&gt;: iOS: &lt;a href=&#34;https://sparkmailapp.com/&#34;&gt;Spark&lt;/a&gt; and Mail.app and macOS: &lt;a href=&#34;https://canarymail.io/&#34;&gt;Canary Mail&lt;/a&gt; and Mail.app&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;📝 &lt;strong&gt;Notes&lt;/strong&gt;: &lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt; and &lt;a href=&#34;https://www.devontechnologies.com/apps/devonthink&#34;&gt;DEVONthink&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;✅ &lt;strong&gt;To-Do&lt;/strong&gt;: Previously &lt;a href=&#34;https://culturedcode.com/things/&#34;&gt;Things&lt;/a&gt;, now &lt;a href=&#34;https://www.omnigroup.com/omnifocus/&#34;&gt;OmniFocus&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;📷 &lt;strong&gt;iPhone Photo Shooting&lt;/strong&gt;: Camera.app&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🟦 &lt;strong&gt;Photos Management&lt;/strong&gt;: Photos.app&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;📆 &lt;strong&gt;Calendar&lt;/strong&gt;: Calendar.app (Personal) and Outlook (Work)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;📅 &lt;strong&gt;Calendar Backend&lt;/strong&gt;: iCloud (Personal) and Nexus365 (Work)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;📁 &lt;strong&gt;Cloud File Storage&lt;/strong&gt;: iCloud Drive (Personal) and Google Drive (Work)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;📖 &lt;strong&gt;RSS&lt;/strong&gt;: Previously &lt;a href=&#34;https://www.reederapp.com/&#34;&gt;Reeder&lt;/a&gt; with &lt;a href=&#34;https://www.freshrss.org/&#34;&gt;FreshRSS&lt;/a&gt;, Now &lt;a href=&#34;https://netnewswire.com/&#34;&gt;NetNewsWire&lt;/a&gt; iCloud account&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🙍🏻‍♂️ &lt;strong&gt;Contacts Management&lt;/strong&gt;: Contacts.app&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🌐 &lt;strong&gt;Browser&lt;/strong&gt;: Safari on iOS, and &lt;a href=&#34;https://arc.net/&#34;&gt;Arc&lt;/a&gt; on my Mac&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;💬 &lt;strong&gt;Chat&lt;/strong&gt;: &lt;a href=&#34;https://wechat.com/&#34;&gt;WeChat&lt;/a&gt;, &lt;a href=&#34;https://telegram.org/&#34;&gt;Telegram&lt;/a&gt;, &lt;a href=&#34;https://slack.com/&#34;&gt;Slack&lt;/a&gt; and &lt;a href=&#34;https://discord.com/&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🔖 &lt;strong&gt;Bookmarks&lt;/strong&gt;: &lt;a href=&#34;https://anybox.app/&#34;&gt;Anybox&lt;/a&gt; and &lt;a href=&#34;https://www.devontechnologies.com/apps/devonthink&#34;&gt;DEVONthink&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;📑 &lt;strong&gt;Read-it-Later&lt;/strong&gt;: &lt;a href=&#34;https://www.omnigroup.com/omnifocus/&#34;&gt;OmniFocus&lt;/a&gt; and &lt;a href=&#34;https://www.devontechnologies.com/apps/devonthink&#34;&gt;DEVONthink&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;📜 &lt;strong&gt;Word Processing&lt;/strong&gt;: Google Docs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;📈 &lt;strong&gt;Spreadsheets&lt;/strong&gt;: Google Sheets&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;📊 &lt;strong&gt;Presentations&lt;/strong&gt;: Keynote.app, and PDF generated from Markdown using &lt;a href=&#34;https://pandoc.org&#34;&gt;Pandoc&lt;/a&gt; or &lt;a href=&#34;https://latex-project.org&#34;&gt;LaTeX&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🛒 &lt;strong&gt;Shopping List&lt;/strong&gt;: &lt;a href=&#34;https://www.omnigroup.com/omnifocus/&#34;&gt;OmniFocus&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🍴 &lt;strong&gt;Meal Planning (as Recipe Management)&lt;/strong&gt;: N/A, not that I don&#39;t eat/cook, but I don&#39;t have a meal planning system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;💰 &lt;strong&gt;Budgeting and finance&lt;/strong&gt;: &lt;a href=&#34;https://apps.apple.com/gb/app/cookie-%E8%AE%B0%E8%B4%A6-money-manager/id1559943673&#34;&gt;Cookie&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;📰 &lt;strong&gt;News&lt;/strong&gt;: From podcast, RSS feeds and Twitter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🎵 &lt;strong&gt;Music&lt;/strong&gt;: Apple Music, sometimes on &lt;a href=&#34;https://www.bilibili.com/&#34;&gt;Bilibili&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🎤 &lt;strong&gt;Podcast&lt;/strong&gt;: &lt;a href=&#34;https://apps.apple.com/gb/app/%E5%B0%8F%E5%AE%87%E5%AE%99-%E4%B8%80%E8%B5%B7%E5%90%AC%E6%92%AD%E5%AE%A2/id1488894313&#34;&gt;小宇宙&lt;/a&gt; for Chinese channels and Apple Podcasts for all others. I am also using &lt;a href=&#34;https://podwise.xyz/&#34;&gt;Podwise.xyz&lt;/a&gt; as an AI tool.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🔐 &lt;strong&gt;Password Management&lt;/strong&gt;: &lt;a href=&#34;https://1password.com/&#34;&gt;1Password&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🧑‍💻 &lt;strong&gt;Code Editor&lt;/strong&gt;: &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  
  <entry>
    <title>RSS-GPT Configuration</title>
    <link ref="alternate" href="https://yinan.me/rss-gpt-manual-en.html" />
    <id>rss-gpt-manual-en</id>
    <published>2023-09-11 18:14:50+01:00</published>
    <updated>2023-11-07 22:15:43+00:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yinan-c/RSS-GPT&#34;&gt;yinan-c/RSS-GPT&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yinan-c.github.io/rss-gpt.html&#34;&gt;RSS-GPT Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yinan-c.github.io/rss-gpt-manual-zh.html&#34;&gt;中文教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GitHub account&lt;/li&gt;
&lt;li&gt;OpenAI API Key (get it at &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;OpenAI website&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;1. GitHub Actions deployment&lt;/h2&gt;
&lt;p&gt;The main idea is to use GitHub Actions to run Python scripts periodically, the script calls OpenAI API to generate summaries and append them to original RSS entries, then generate a new xml file, and commit it to the repo. &lt;/p&gt;
&lt;p&gt;All contents in the repo folder are deployed on GitHub Pages, so you can access the xml file via your GitHub Pages URL, and subscribe to it like normal RSS feeds in any RSS reader.&lt;/p&gt;
&lt;p&gt;If you don&#39;t want to deploy on GitHub Pages, you can also subscribe to the raw xml file in the repo (URL starts with &lt;code&gt;https://raw.githubusercontent.com&lt;/code&gt;), e.g. the xml file URL of this repo is &lt;a href=&#34;https://raw.githubusercontent.com/yinan-c/RSS-GPT/main/docs/brett-terpstra.xml&#34;&gt;https://raw.githubusercontent.com/yinan-c/RSS-GPT/main/docs/brett-terpstra.xml&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;1.1 Fork the project&lt;/h3&gt;
&lt;p&gt;Go to the project &lt;a href=&#34;https://github.com/yinan-c/RSS-GPT&#34;&gt;RSS-GPT&lt;/a&gt; and fork it to your own repo. I recommend not to change the repo name, if you do so, you&#39;ll have to modify &lt;code&gt;main.py&lt;/code&gt; in step 3.&lt;/p&gt;
&lt;h3&gt;1.2 Three Repo Secrets&lt;/h3&gt;
&lt;h4&gt;U_NAME&lt;/h4&gt;
&lt;p&gt;The username used for &lt;code&gt;git commit&lt;/code&gt;, &lt;strong&gt;please set to your GitHub username&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;U_EMAIL&lt;/h4&gt;
&lt;p&gt;The email used for &lt;code&gt;git commit&lt;/code&gt;, it&#39;s the email you used to register GitHub, can be found in &lt;a href=&#34;https://github.com/settings/emails&#34;&gt;GitHub Settings page&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;WORK_TOKEN&lt;/h4&gt;
&lt;p&gt;Since the project involves using scripts to operate repo contents, permissions are needed for the script to modify files in the repo. Apply for a new personal access token (classic) in &lt;a href=&#34;https://github.com/settings/tokens/new&#34;&gt;GitHub settings page&lt;/a&gt; and configure the new token as follows:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/token-set.png&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Note: RSS-GPT or any name you like&lt;/li&gt;
&lt;li&gt;Select scopes: Check all options under &#34;repo&#34; and &#34;workflow&#34; &lt;/li&gt;
&lt;li&gt;Expiration: Choose &#34;No expiration&#34; &lt;/li&gt;
&lt;li&gt;Click &#34;Generate token&#34; at bottom.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/token-copy.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Copy the token after clicking, make sure to copy it on this page, you won&#39;t be able to see the token after leaving this page. If you miss it, you&#39;ll have to generate a new one following the steps above.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;1.3 Set Repository Secrets&lt;/h3&gt;
&lt;p&gt;Go to your forked repo, click &#34;Settings&#34; in top menu bar, then click &#34;Secrets and variables&#34; in left sidebar, choose &#34;Actions&#34;, then click &#34;New repository secret&#34; at top right. &lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/secrets.png&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;U_NAME&lt;/code&gt;, &lt;code&gt;U_EMAIL&lt;/code&gt;, &lt;code&gt;WORK_TOKEN&lt;/code&gt;, &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; as secrets to the repo, can only add one at a time:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Name: U_NAME, U_EMAIL, WORK_TOKEN, OPENAI_API_KEY&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Value: Your username, email, the copied GitHub token and OpenAI API Key&lt;/li&gt;
&lt;li&gt;Click &#34;Add secret&#34;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.4 Grant required permissions&lt;/h3&gt;
&lt;p&gt;Enable GitHub Actions access to Pages:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/pages.png&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click &#34;Settings&#34; in top menu bar&lt;/li&gt;
&lt;li&gt;Find &#34;Pages&#34; under &#34;Code and automation&#34; in left sidebar and click in&lt;/li&gt;
&lt;li&gt;Set source as deploy from main branch /docs folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2. Configure RSS sources to merge, filter and summarize&lt;/h2&gt;
&lt;p&gt;Go to the project, open the &#34;config.ini&#34; file, click the pencil icon at top right to edit code and configure your desired sources. Don&#39;t change the first two lines.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[cfg] 
base = &#34;docs/&#34;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then modify the &lt;strong&gt;target language, number of keywords, and summary length&lt;/strong&gt; in the next 3 lines. The following code is feed-specific configs, format is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[source001]&lt;/code&gt;: Feed ID, starts from 001 and increments, make sure IDs are unique to avoid errors.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name = &#34;brett-terpstra&#34;&lt;/code&gt;: Name of the generated feed, only letters (a-z A-Z), numbers (0-9), (&lt;code&gt;-&lt;/code&gt;,&lt;code&gt;_&lt;/code&gt;,&lt;code&gt;.&lt;/code&gt;,&lt;code&gt;~&lt;/code&gt;) allowed. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;url = &#34;https://brett.trpstra.net/brettterpstra&#34;&lt;/code&gt;: Original RSS feed URL, can contain multiple feeds separated by comma. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;max_items = &#34;10&#34;&lt;/code&gt;: Number of articles to summarize between refreshes. E.g. 10 means summarizing the latest 10 articles on each refresh. If set to 0 or not set, no articles will be summarized and original entries will be returned.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next are optional filter configs, &lt;strong&gt;note all three configs must be set or not set at the same time, error will occur if only one or two of them are set&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filter_apply = &#34;title&#34;&lt;/code&gt;: Apply filter on &#34;title&#34;, &#34;article&#34; (content) or &#34;link&#34;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter_type = &#34;exclude&#34;&lt;/code&gt;: Filter type: &#34;include&#34;, &#34;exclude&#34;, &#34;regex match&#34; or &#34;regex not match&#34;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter_rule = &#34;TextExpander&#34;&lt;/code&gt;: Filter text or regex.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click &#34;Commit changes&#34; at bottom to submit edits.&lt;/p&gt;
&lt;h2&gt;3 Modify &lt;code&gt;main.py&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;(if you used default repo name in 1.1 and you don&#39;t want to modify prompt, you can skip this step)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open &#34;main.py&#34; file, click the pencil icon to edit code, go to line 290 and modify the &#34;RSS-GPT&#34; in &#34;https://{U_NAME}.github.io/RSS-GPT&#34; to your repo name.&lt;/li&gt;
&lt;li&gt;(Optional) Modify prompt at lines 113-129 based on your needs for better summaries. &lt;/li&gt;
&lt;li&gt;Click &#34;Commit changes&#34; at bottom to submit edits.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;4. Configure and test GitHub Actions&lt;/h2&gt;
&lt;p&gt;Go to the project, click &#34;Actions&#34; in top menu bar, click &#34;cron_job&#34; and choose &#34;Run workflow&#34;.&lt;/p&gt;
&lt;p&gt;Green check mark means successful run, red x means failure, usually due to errors in edited ini file or incorrect permissions/tokens. Double check if errors occur.&lt;/p&gt;
&lt;p&gt;If there are no errors, you should see your feeds on the project README page. &lt;/p&gt;
&lt;p&gt;On the left of &lt;code&gt;-&amp;gt;&lt;/code&gt; is original URL, right is converted URL to subscribe like any other RSS feeds.&lt;/p&gt;
&lt;h2&gt;Some extra notes&lt;/h2&gt;
&lt;h3&gt;About feeds refresh frequency&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Default run frequency is every 2 hours, modify &lt;code&gt;.github/workflows/cron_job.yml&lt;/code&gt; line 7 to change, e.g. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;- cron: &#39;0 */2 * * *&#39; # run every 2 hours
   - cron: &#39;0 */1 * * *&#39; # run every 1 hours
   - cron: &#39;0 0 * * *&#39; # run every day at 00:00
   - cron: &#39;*/30 * * * *&#39; # run every 30 minutes&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For more info on cron syntax, see &lt;a href=&#34;https://crontab.guru/&#34;&gt;crontab docs&lt;/a&gt; or &lt;a href=&#34;https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule&#34;&gt;GitHub docs&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;What if I don&#39;t want to use summarization feature?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Well, you can still use this script to filter and merge multiple subscription sources. You just need to not set the OpenAI API Key in 1.3, or not set the &lt;code&gt;max_items&lt;/code&gt; in &lt;code&gt;config.ini&lt;/code&gt;, or set it to 0. By default, this script can also return the original article entries when the AI call fails. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you do want the AI summarization feature and have correctly set &lt;code&gt;config.ini&lt;/code&gt;, but still receive the original entries without summarization or experience infrequent updates, you can check the error information of the OpenAI API or feedparser from the &lt;code&gt;feed_name.log&lt;/code&gt; file in the &lt;code&gt;docs/&lt;/code&gt; subdirectory of the repo.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;About AI summary content&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;My prompt is basically asking AI to extract keywords + summarize + auto-formatting. Formatting is not always perfect, and my prompt is not perfectly optmized for everyone. You can modify prompt at lines 113-129 based on your needs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AI summaries are based on the description of each article in the feed. If the RSS itself provides the full text article, the full text will be summarized; if the RSS only provides the article summary, the summary will be based on the summary, and the script does not currently provide the function of crawling the full text of the original article.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;About the usage of OpenAI API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Regarding the usage of the OpenAI API, in order to minimize costs as much as possible, the following default measures have been adopted for this project:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All unrelevent content (images, frames, HTML tags etc.) are removed before sending to OpenAI API, in order to reduce the token length and cost.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the text length exceeds 16k, &lt;code&gt;gpt-4-1106-preview&lt;/code&gt; will be used, otherwise &lt;code&gt;GPT-3.5 Turbo&lt;/code&gt; is used by default. If you want to use a different model, you can modify the model parameter passed to the &lt;code&gt;gpt_summary&lt;/code&gt; function of lines 227-243 of main.py, e.g. &lt;code&gt;model=&#34;your_model&#34;&lt;/code&gt;. Please refer to the &lt;a href=&#34;https://openai.com/pricing/&#34;&gt;OpenAI API Pricing&lt;/a&gt; for different prices of different OpenAI models.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The script will read the xml files already existing in the docs/ folder. Existing articles will not be summarized again, so OpenAI API will not be repeatedly consumed. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;About repo updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I have separated manual edits and workflow auto commits into different branches, so you can see when and what I have edited in the &lt;code&gt;dev&lt;/code&gt; branch to decide whether to pull the latest changes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If OpenAI releases more models in the future, I will choose the most suitable default model and update the code accordingly. If you have a better way to use AI or encounter any issues or spotted any errors, feel free to &lt;a href=&#34;mailto:yinan.email@gmail.com&#34;&gt;email me&lt;/a&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  
  <entry>
    <title>RSS-GPT 使用指南</title>
    <link ref="alternate" href="https://yinan.me/rss-gpt-manual-zh.html" />
    <id>rss-gpt-manual-zh</id>
    <published>2023-09-11 17:51:18+01:00</published>
    <updated>2023-11-07 22:15:43+00:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;h2&gt;项目地址与功能介绍&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yinan-c/RSS-GPT&#34;&gt;yinan-c/RSS-GPT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yinan-c.github.io/rss-gpt.html&#34;&gt;RSS-GPT介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://yinan-c.github.io/rss-gpt-manual-en.html&#34;&gt;English manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;需要准备的东西&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GitHub 账号&lt;/li&gt;
&lt;li&gt;OpenAI API Key （可以在&lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;这里&lt;/a&gt;建立账号申请）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;1 GitHub Actions 部署&lt;/h2&gt;
&lt;p&gt;大致原理是使用 GitHub Actions 定时运行 Python 脚本, 脚本调用 OpenAI API 生成总结附在 RSS 原文之前, 生成一个新的 xml 文件, 并自动 commit 到仓库中 docs/ 文件夹内。&lt;/p&gt;
&lt;p&gt;文件夹内所有内容都将自动部署在 GitHub Pages 上, 这样就可以通过你的 Pages 地址访问到这个 xml 文件, 然后就可以在任何 RSS 阅读器中订阅。&lt;/p&gt;
&lt;p&gt;如果你不想部署在 GitHub Pages, 应该也可以通过直接访问仓库中的 xml 原文件（地址以 &lt;code&gt;https://raw.githubusercontent.com&lt;/code&gt; 开头）来订阅, 比如说我这个仓库的 xml 文件地址是 &lt;a href=&#34;https://raw.githubusercontent.com/yinan-c/RSS-GPT/main/docs/brett-terpstra.xml&#34;&gt;https://raw.githubusercontent.com/yinan-c/RSS-GPT/main/docs/brett-terpstra.xml&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;1.1 Fork项目&lt;/h3&gt;
&lt;p&gt;进入项目 &lt;a href=&#34;https://github.com/yinan-c/RSS-GPT&#34;&gt;RSS-GPT&lt;/a&gt;, 然后 fork 项目到自己的仓库。&lt;/p&gt;
&lt;h3&gt;1.2 记录三个需要的参数&lt;/h3&gt;
&lt;h4&gt;U_NAME&lt;/h4&gt;
&lt;p&gt;就是 &lt;code&gt;git commit&lt;/code&gt; 用的用户名, 一般可以用你的 GitHub 用户名, 你的 GitHub 主页地址的最后一段就是你的用户名, 比如 https://github.com/yinan-c, 用户名就是 yinan-c。&lt;/p&gt;
&lt;h4&gt;U_EMAIL&lt;/h4&gt;
&lt;p&gt;就是 &lt;code&gt;git commit&lt;/code&gt; 用的邮箱, 是你注册 GitHub 时的邮箱, 可以在 &lt;a href=&#34;https://github.com/settings/emails&#34;&gt;GitHub 设置页面&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;WORK_TOKEN&lt;/h4&gt;
&lt;p&gt;因为项目涉及使用脚本操作仓库内容,所以需要给脚本修改仓库内文件的权限,需要申请一个 Repository Secret 令牌。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;点击 GitHub 主页右上角自己的头像, 点 &#34;Settings&#34; 进入设置页面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击左侧菜单栏一列最下方的 “&amp;lt; &amp;gt; Developer settings&#34; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点开左侧菜单栏下方的 “ 🔑 Personal access tokens&#34;, 选择 ”Tokens (classic)“, 点开左上角的 &#34;Generate new token&#34;, 选择第二项 &#34;Generate new token (classic)&#34; 生成一个新的 token。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;配置新建的token&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/token-set.png&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Note: RSS-GPT&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select scopes: 勾选前两栏 &#34;repo&#34; 和 &#34;workflow&#34; 内的所有选项&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Expiration: 选 &#34;No expiration&#34; (无期限)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击页面最下方的 &#34;Generate token&#34;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/token-copy.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;点击完后复制token, 注意一定要在此页面复制好, 离开这个页面你就再也看不到token了。错过就只能按照上面的步骤重新生成一个了&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;1.3 设置 Repository Secrets&lt;/h3&gt;
&lt;p&gt;进入你 fork 的 repository, 点击上方菜单栏的 &#34;Settings&#34;, 然后点开左侧菜单栏的 &#34;Secrets and variables&#34;, 选择 &#34;Actions&#34;, 然后点击右上角的 &#34;New repository secret&#34;。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/secrets.png&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;给仓库分别添加 &lt;code&gt;U_NAME&lt;/code&gt;, &lt;code&gt;U_EMAIL&lt;/code&gt;, &lt;code&gt;WORK_TOKEN&lt;/code&gt;, &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; 4个 repo secrets, 一次只能添加一个&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Name: U_NAME, U_EMAIL, WORK_TOKEN, OPENAI_API_KEY&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Value: 分别为 U_NAME 上面所说的你的用户名, U_EMAIL 是上面所说的你的邮箱, WORK_TOKEN 是你刚刚复制的 token&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击 “Add secret“&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.4 给需要的权限&lt;/h3&gt;
&lt;p&gt;开启 GitHub Actions 访问 Pages 的权限&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/pages.png&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;点击 “Settings” &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在左侧 “Code and automation” 下找到 “Pages” 点击进入&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将 Source 设置为 deploy from main branch /docs folder. 即从 main 分支的 docs 文件夹部署到 Pages 上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2 设置需要合并, 过滤, 总结的 RSS 源&lt;/h2&gt;
&lt;p&gt;进入项目, 点击上方菜单栏的 &#34;Code&#34;, 点击进入 &#34;config.ini&#34; 文件, 点击右上角的铅笔图标, 编辑代码, 设置你需要的订阅源, 前两行的内容不要动。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[cfg]
base = &#34;docs/&#34;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后在接下来的三行更改&lt;strong&gt;目标语言, 关键词数量, 和总结长度&lt;/strong&gt;。之后的代码是 feed-specific 的配置, 格式如下, 首先是3个必填项目:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;[source001]&lt;/code&gt;: 订阅序号, 从001开始增长, 注意请确保编号不要重复, 不然代码会报错&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;name = &#34;brett-terpstra&#34;&lt;/code&gt;: 生成订阅源的名称, 只允许包含英文字母(a-z A-Z)、数字(0-9)、(&lt;code&gt;-&lt;/code&gt;,&lt;code&gt;_&lt;/code&gt;,&lt;code&gt;.&lt;/code&gt;,&lt;code&gt;~&lt;/code&gt;) 4个特殊字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;url = &#34;https://brett.trpstra.net/brettterpstra&#34;&lt;/code&gt;: 原始RSS订阅链接, 可以包含多条, 用逗号分隔&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;max_items = &#34;10&#34;&lt;/code&gt;: 两次刷新间隔之间需要总结的文章数量。比如你设置为10, 那么每次刷新时, 会把最新的10条文章进行总结。如果设置为0或者不设置, 则不会总结任何文章, 返回原始条目。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来是关于过滤的可选配置: &lt;strong&gt;注意三个配置必须要同时设置或者同时不设置, 不能只设置其中一个或者两个, 否则会报错。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filter_apply = &#34;title&#34;&lt;/code&gt;: 过滤条件需要应用在 &#34;title&#34;（标题）, &#34;article&#34; （正文内容）or &#34;link&#34; （链接）&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;filter_type = &#34;exclude&#34;&lt;/code&gt;: 过滤类型: ”include“（包含）,  “exclude“（不包含）, or ”regex match“（正则匹配）or ”regex not match“（正则不匹配）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;filter_rule = &#34;TextExpander&#34;&lt;/code&gt;: 过滤内容, 字符串或者正则表达式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击最下边的 “Commit changes” 提交修改。&lt;/p&gt;
&lt;h2&gt;3.1 修改 main.py 中的仓库名称&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;(如果你在 1.1 中使用了默认仓库名称，或者你不想要修改 prompt, 可以跳过这一步)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;进入 “main.py&#34; 文件, 点击笔形图标, 编辑代码, 进入第 290 行,  修改 &#34;https://{U_NAME}.github.io/RSS-GPT&#34; 中的 RSS-GPT 为你的仓库名称。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（可选）根据你的需求, 可以在 113 - 129 行修改 prompt, 让 GPT 生成更符合你需求的总结。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击最下边的 “Commit changes” 提交修改。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;4 开启并测试 GitHub Actions&lt;/h2&gt;
&lt;p&gt;进入项目, 点击上方菜单栏的 &#34;Actions&#34;, 点击 “cron_job&#34;, 选择 “Run workflow&#34;&lt;/p&gt;
&lt;p&gt;等待运行成功会显示绿色的勾, 运行失败会显示红色的叉。如果出现红叉, 一般都是你修改 ini 文件时, 什么地方写错了, 或者权限、Secrets 设置错误。请仔细检查。&lt;/p&gt;
&lt;p&gt;如果前边没出现错误 (主要是运动 Actions 没出现红叉), 那么你可以在项目的介绍页看到你的订阅源。&lt;/p&gt;
&lt;p&gt;每条项目的 &lt;code&gt;-&amp;gt;&lt;/code&gt; 左侧的是原始订阅链接, 右侧是转换后的链接。请确保你已经在第3步中设置了你自己的 GitHub Pages 地址。在任何 RSS 阅读器中订阅右侧的链接即可。&lt;/p&gt;
&lt;h2&gt;一些额外的说明&lt;/h2&gt;
&lt;h3&gt;关于 feed 刷新频率&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;默认设置是每2小时运行一次脚本, 如果有不同需要，请修改 &lt;code&gt;.github/workflows/cron_job.yml&lt;/code&gt; 文件第7行, 比如：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;- cron: &#39;0 */2 * * *&#39; # 每2小时运行一次
   - cron: &#39;0 */1 * * *&#39; # 每1小时运行一次
   - cron: &#39;0 0 * * *&#39; # 每天0点运行一次
   - cron: &#39;*/30 * * * *&#39; # 每30分钟运行一次&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;更加具体的参数可以查看 &lt;a href=&#34;https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule&#34;&gt;crontab&lt;/a&gt; 的用法 或者&lt;a href=&#34;https://crontab.guru/&#34;&gt;crontab.guru&lt;/a&gt; 的文档。&lt;/p&gt;
&lt;h3&gt;如果你不想要 AI 总结的功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;你仍然可以使用本脚本来过滤和合并多个订阅源，只需要在 1.3 不设置 OpenAI API Key，或者在 &lt;code&gt;config.ini&lt;/code&gt; 中不设置 &lt;code&gt;max_items&lt;/code&gt; 或者设置为 0 即可，这个脚本默认在 AI 调用失败时也能返回文章原始条目。 &lt;/li&gt;
&lt;li&gt;如果你想要 AI 总结功能并且正确设置了 &lt;code&gt;config.ini&lt;/code&gt;，但是仍然返回原始条目或者久久不更新， 请检查&lt;code&gt;docs/&lt;/code&gt; 文件夹内的 &lt;code&gt;feed_name.log&lt;/code&gt; 文件中查看 OpenAI API 或者 feedparser 的错误信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;关于 OpenAI 总结的内容&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我设定的 prompt 是让 AI 帮助提取 关键词 + 总结 并且让 AI 自动排版, 有些时候 AI 排版的效果并不是很好, 你也可以根据自己需要修改 &lt;code&gt;main.py&lt;/code&gt; 第 113 - 129 行的 prompt。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AI 总结的内容基于 feed 中每条文章的描述，如果 RSS 本身提供全文，则会全文总结；如果 RSS 仅提供文章摘要，则总结基于摘要，目前脚本没有提供抓取原文全文的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;关于 OpenAI API 的用量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;关于 OpenAI API 的用量，为了尽可能保证费用尽可能低，本项目采取了以下默认措施：&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所有非文本内容（图片，框架，HTML 标签等）在让 GPT 总结之前都会被移除，以节约 token 用量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据文本长度选取不同的模型，而如果文本长度超过了 16k，&lt;code&gt;gpt-4-1106-preview&lt;/code&gt; 模型会被使用，否则默认使用 &lt;code&gt;GPT-3.5 Turbo&lt;/code&gt;。如果你想要使用不同的模型，可以在 &lt;code&gt;main.py&lt;/code&gt; 文件修改第 227 - 243 行中传入 &lt;code&gt;gpt_summary&lt;/code&gt; 函数的参数 &lt;code&gt;model=&#34;your_model&#34;&lt;/code&gt; 。请参考 &lt;a href=&#34;https://openai.com/pricing/&#34;&gt;OpenAI API Pricing&lt;/a&gt; 了解不同 OpenAI 模型的不同价格。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;脚本会读取 docs/ 文件夹中已存在的 xml 文件，已经存在的文章不会再次总结，所以不会重复消耗用量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;关于仓库更新&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我把仓库中手动修改和 workflow 自动提交修改放到了不同的分支，所以你可以直接在 &lt;code&gt;dev&lt;/code&gt; 分支中看到我最后一次手动修改的时间和内容，来决定是否拉取最新的修改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果 OpenAI 之后发布了更多的模型，我会酌情选择最合适的默认模型，修改代码。如果你有更合理的使用 AI 的方案或者使用过程中有问题，或者发现本教程有错误，欢迎 &lt;a href=&#34;mailto:yinan.email@gmail.com&#34;&gt;email&lt;/a&gt; 交流。最后，如果你觉得本教程或本项目对你有帮助，欢迎 star &lt;a href=&#34;https://github.com/yinan-c/RSS-GPT&#34;&gt;本项目&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  

</feed>