<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>1nan</title>
  <link ref="self" href=""/>
  <link ref="alternate" href="https://yinan.me/"/>
  <updated></updated>
  <author>
    <name>Yinan</name>
  </author>
  <id>ba15f2bcfa5336d8d2f005c8f0aa7951c3b52e50</id>

  
  <entry>
    <title>滴答清单体验</title>
    <link ref="alternate" href="https://yinan.me/ticktick.html" />
    <id>ticktick</id>
    <published>2024-11-27 03:36:13+00:00</published>
    <updated>2024-11-27 12:03:25+00:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;p&gt;半年之前写过一篇&lt;a href=&#34;https://yinan.me/todo-app.html&#34;&gt;苹果端 Todo App 简单比较&lt;/a&gt;，主要是分析了 Things 和 OmniFocus 的优缺点，当时没有深度体验滴答清单（海外版称 TickTick），所以今天补上。&lt;/p&gt;
&lt;p&gt;我是从 2022 年开始使用 Things3，2023年底换了 OmniFocus 4，一年后的今天我选择试一下滴答清单，所以这篇文章大多是关于 OmniFocus 和滴答清单的比较，会少量提到一下和 Things 的比较。&lt;/p&gt;
&lt;p&gt;（P.S.: 现在 Things3 正在黑五7折优惠）&lt;/p&gt;
&lt;h2&gt;1 为什么要换&lt;/h2&gt;
&lt;p&gt;更换工具折腾是很大的时间精力和金钱成本，尤其是 TODO 和笔记，更何况我之前还写了把 Things/OmniFocus 的任务导出的脚本，换一个工具意味着重新来过。&lt;/p&gt;
&lt;p&gt;但这一年 OmniFocus 确实也有让我体验不佳不点
- 数据量大了会很卡，之前清理过一次了，我目前大概 2000 多个条目（包括已完成）不管是手机还是电脑端都不够流畅。
- 不够美观。见仁见智，我更喜欢 Things 的界面。
- OmniFocus 不像 Things 或者滴答清单那么，任务/项目完成了之后就完全从列表内隔离开，而是继续保持原有的结构在穿插在其他未完成的任务/项目中，导致界面很杂乱，虽然也可以通过改变视图为显示剩余，但这样又失去了结构，总之项目结构和整洁度二者只能去其一。
&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/Omnifocus-random.png&#34; /&gt;
- 最主要的是产品的使用逻辑和我不对付，Things/滴答都有一个今日视图，给任务安排一个时间，他就会出现在那天的今日视图中，当然也可以通过 perspective 建立一个筛选过的今日视图（比如说筛选出&lt;code&gt;正在进行&lt;/code&gt;标签或者有 defer/deadline date 是今日以及以前的任务。但我发现我就会滥用截止日期，过期的多了最后会导致对截止日期过期不敏感了，再加上杂乱的界面，会感觉失去重点和优先级，反而完成不了要紧事。&lt;/p&gt;
&lt;p&gt;当然 OmniFocus 也有很多特别出彩的地方，比如说自定义 perspective（里面的条件很丰富），review 功能，插件自动化，Focus View（配合新窗口）等。具体可以见我之前的&lt;a href=&#34;https://yinan.me/todo-app.html&#34;&gt;文章&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;2 滴答 vs OmniFocus&lt;/h2&gt;
&lt;p&gt;以下是我在会员免费期体验到的，有些功能可能免费版没有，另外限于时间，体验内容肯定不够完全。&lt;/p&gt;
&lt;h3&gt;优点：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;外观：美观介于 OmniFocus 和 Things 之间。这两者的笔记一栏是长方形选中框的的下延展，随着笔记内容变多而变大，things 是纯文本格式， OmniFocus 是富文本，但是似乎只能通过粘贴保留格式，输入是纯文本格式，而且 OmniFocus 还挺卡的。滴答清单每一条任务展开之后占据右侧1/3窗口，完全可以当作一页纸来写（所以官方提供了转化为笔记的功能吧），还可以对内容进行加粗高亮，富文本。&lt;/li&gt;
&lt;li&gt;操作和 Things 差不多顺滑，就是鼠标拖动支持的有点别扭（默认鼠标是选中文本，得选中左边的三条杠小图标才能拖动），目前来看键盘快捷键支持不如 Things 和 OmniFocus。&lt;/li&gt;
&lt;li&gt;归档和完成的任务与开放项目隔离，眼不见为净。OmniFocus 所有都显示的话会很乱，见上图。但是我又需要看到能看到项目的结构，滴答正好通过最右边栏任务的详细页面做到了两个的平衡，也就是中间栏隔离，右侧栏保留结构（Things 的 Logbook 完全就没有原来的项目结构了，或者说 Things 本身除了 Heading 和任务内的检查事项就没有父子结构的概念，除非 Heading 整个被标记完成，才能在 Logbook 内还原 Heading 结构。&lt;/li&gt;
&lt;li&gt;粘贴的链接可以自动识别并填充标题。&lt;/li&gt;
&lt;li&gt;原生看板，OmniFocus 需要用插件配合标签，Things 只有一个只读的&lt;a href=&#34;https://apps.apple.com/gb/app/kanbanview/id1507458952&#34;&gt;第三方软件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;完备的日历页面和任务+时间线的安排功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/ticktick.png&#34; /&gt;
&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/things-heading.png&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;虽然可以筛选，但是不能专注到某一个 project/area。&lt;/li&gt;
&lt;li&gt;筛选可选项不如 OmniFocus 多，比如说没有办法实现根据创建时间/修改时间的筛选排序，这样很容易创建了就忘了，就连 Things 都能通过&lt;a href=&#34;https://www.icloud.com/shortcuts/967cbbc1c61546e4a869da6b35b59060&#34;&gt;捷径实现&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;数据存储备份：OmniFocus 和 Things 似乎都是本地数据库+本地多副本备份+云端同步的方式，OmniFocus 支持手动打开 .ofocus-backup 回溯到某一个版本，然后支持本地覆盖云端/云端覆盖本地。滴答清单的数据好像都在云端存储，本地甚至不会显示出项目内所有已完成的任务（所以会在你搜不到东西的时候，有在云端中搜索的选项）&lt;/li&gt;
&lt;li&gt;数据导出：滴答只支持任务导出到 csv，官方 API 只能导出未完成任务。OmniFocus 支持随意筛选项目后，导出 csv 和 .ofocus 文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;其他有好有坏，见仁见智&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用逻辑：&lt;/li&gt;
&lt;li&gt;OmniFocus 不同项目有区分，所以你可以很明显的看到项目的下一个任务（Next Available）是什么。&lt;/li&gt;
&lt;li&gt;滴答只有一个安排日期，OmniFocus 和 Things 都有两个日期，一个安排日期，一个截止日期。&lt;/li&gt;
&lt;li&gt;在 OmniFocus 中清单和任务没有太大的界限，可以互相拖动转换，Things 中任务可以被拖到 Area（也就是文件夹）下一层和项目平行，但是不能互相转换，Heading 可以转为项目，滴答清单自由度最低，任务，清单，文件夹，三种层级严格，任务 &amp;lt; 清单 &amp;lt; 文件夹，不能互相转换，除了任务可以有最多五层和其他任务的嵌套。但是拖动操作很不方便。&lt;/li&gt;
&lt;li&gt;不会显示最近修改的任务列表，但是对于每一个任务有任务动态，还有垃圾箱，防止误删除。&lt;/li&gt;
&lt;li&gt;mac 软件的第三方支持：&lt;/li&gt;
&lt;li&gt;Raycast: OmniFocus 没有，滴答很好用；Alfred: OmniFous &amp;gt; 滴答。&lt;/li&gt;
&lt;li&gt;Popclip for &lt;a href=&#34;https://www.popclip.app/extensions/x/htd93q&#34;&gt;TickTick/滴答&lt;/a&gt;, &lt;a href=&#34;https://www.popclip.app/extensions/x/2xsjgt&#34;&gt;Things&lt;/a&gt; and &lt;a href=&#34;https://www.popclip.app/extensions/x/69vkqz&#34;&gt;OmniFocus&lt;/a&gt; 都有。&lt;/li&gt;
&lt;li&gt;Chrome 插件，TickTick 会更加强大一点, OmniFocus 只有一个第三方的添加。&lt;/li&gt;
&lt;li&gt;全局添加：OmniFocus 有 Services - Add to OmniFocus 和 Share menu 两项。滴答和 Things 都是快捷键唤出一个类似于 spotlight 的窗口添加，things 和 OmniFocus 会有对当前窗口的 context 自动填充。&lt;/li&gt;
&lt;li&gt;API 与自动化: &lt;ul&gt;
&lt;li&gt;Things 有 &lt;a href=&#34;https://culturedcode.com/things/support/articles/2803573/&#34;&gt;URL scheme&lt;/a&gt;, &lt;a href=&#34;https://culturedcode.com/things/support/articles/2803572/&#34;&gt;Applescript&lt;/a&gt;, &lt;a href=&#34;https://github.com/thingsapi/things.py&#34;&gt;第三方 python api&lt;/a&gt;还有官方提供的&lt;a href=&#34;https://culturedcode.com/things/support/articles/2955145/&#34;&gt;捷径库&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;OmniFocus 有 Applescript 和 Javascript 来实现插件。而且可以通过直接读取 sqlite 数据库自动批量的导出数据，之前根据此写过一个&lt;a href=&#34;https://github.com/yinan-c/Omnifocus-export-markdown&#34;&gt;导出到 markdown 的脚本&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;滴答和 TickTick 有 &lt;a href=&#34;https://developer.dida365.com/docs#/openapi&#34;&gt;OpenAPI&lt;/a&gt; 非官方 &lt;a href=&#34;https://github.com/lazeroffmichael/ticktick-py&#34;&gt;ticktick-py&lt;/a&gt; (可能需要自行修改所有域名到 dida365.com) 等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3 滴答的其他功能&lt;/h2&gt;
&lt;p&gt;除了基本的 tasks，滴答还提供番茄钟和习惯打卡，不过目前我没有找到合适的导出这两部分数据的方案，所以没有深度试。&lt;/p&gt;
&lt;h2&gt;4 迁移工作&lt;/h2&gt;
&lt;p&gt;Things 到滴答的迁移好像挺顺滑的（没有深度试），如果是反过来目前 Things 官方没有支持，只能自己从 API 或者导出的 csv 里面想办法。&lt;/p&gt;
&lt;p&gt;OmniFocus 到滴答导入过程需要在 OmniFocus 选中任务再导出 csv，而且导入之后会丢失创建和放弃任务的时间点(后者应该是 OmniFocus 的锅，因为同样的问题在你归档旧的已放弃任务的时候也会出现，会重新变成未完成状态并且丢失放弃时间戳)。&lt;/p&gt;
&lt;p&gt;我之前写过&lt;a href=&#34;https://github.com/yinan-c/Omnifocus-export-markdown&#34;&gt;OmniFocus&lt;/a&gt; 以及 &lt;a href=&#34;https://github.com/yinan-c/things2md&#34;&gt;Things&lt;/a&gt; 导出 markdown 的脚本，也可以用已完成项目按时间规律生成回顾/周报的功能，也可以把所有的任务分项目导出 markdown。配合 git 还可以追踪项目的变化情况。&lt;/p&gt;
&lt;p&gt;迁移之后，花了点时间用各种 API 实现了导出所有未完成/部分完成任务，增量缓存 json，保存 markdown，再输出为 RSS。
其实折腾这么多就是为了能够把数据主动权在自己手里，如果平台/工具倒闭了（希望不要）至少自己还有数据能有退路再保留一份纯文本供自己阅读。&lt;/p&gt;
&lt;h2&gt;5 最后的话&lt;/h2&gt;
&lt;p&gt;关于 GTD（Get Things Done），完成事情是最终目的，折腾上花费的时间不如直接去完成你列表上的项目。这里引用一句话，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The most important lever a leader has to create focus is to simplify the priority list. by &lt;a href=&#34;https://alearningaday.blog/2024/11/21/creating-focus/&#34;&gt;Rohan&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于工具，适合自己才是最好的。所以尽量秉承那句话 If it ain&#39;t broken, don&#39;t fix it.&lt;/p&gt;
&lt;h2&gt;6 相关&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/7376484708547870731&#34;&gt;滴答清单/TickTick 官方API尝试&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  
  <entry>
    <title>Hoarder - 自托管 AI 书签管理软件</title>
    <link ref="alternate" href="https://yinan.me/hoarder-zh.html" />
    <id>hoarder-zh</id>
    <published>2024-11-07 14:48:52+00:00</published>
    <updated>2024-11-07 14:57:21+00:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;p&gt;对于书签管理，我目前的工作流是这样的：自建 &lt;a href=&#34;https://wallabag.org/&#34;&gt;wallabag&lt;/a&gt; 保存稍后读，&lt;a href=&#34;https://anybox.app/&#34;&gt;Anybox&lt;/a&gt; 管理书签并通过 Alfred 快速调用，然后用 &lt;a href=&#34;https://www.devontechnologies.com/apps/devonthink&#34;&gt;DEVONthink&lt;/a&gt; 本地归档 wallabag 的稍候读和 Anybox 的书签，方便全文搜索。为了实现自动化，我还写了&lt;a href=&#34;https://github.com/yinan-c/Anybox-sync-Devonthink/blob/main/anybox_to_devonthink.py&#34;&gt;一个脚本&lt;/a&gt;，可以自动把 Anybox 的新链接同步到 DEVONthink（这个脚本是在 &lt;a href=&#34;https://alfred.app/workflows/anybox/anybox/&#34;&gt;Anybox alfredworkflow&lt;/a&gt; 基础上改进的）。&lt;/p&gt;
&lt;p&gt;这套流程一直运行得挺顺畅，但我还是有两点不太满意：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Anybox 缺少全文搜索功能。截至2024年11月，这个呼声很高的功能还停留在&lt;a href=&#34;https://anybox.canny.io/feature-requests/p/full-text-search&#34;&gt;Under Review&lt;/a&gt;阶段。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;书签整理不够智能。虽然 Anybox 的收件箱理念不错，从收件箱再整理到文件夹、标签，还能依赖 Smart Folder 功能帮忙分类管理，但每周要把他们手动打标签或者移入文件夹还是太麻烦了。在保存了海量书签后，我还是更习惯用搜索（可惜又没有全文搜索）。所以目前我还是倾向于在 Anybox 和 Wallabag 不整理，只有收件和存档两个状态，存档之后依赖 DEVONthink 的全文搜索 + Smart Rules 再自动分类整理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近发现了一个新项目 &lt;a href=&#34;https://github.com/hoarder-app/hoarder&#34;&gt;Hoarder&lt;/a&gt;，主打 AI 自动打标签，准备体验一下，看看能不能取代或者补充 Anybox。（作为一个爱好 self hosted 和囤积资料的人，Hoarder 这个名字就很对我胃口 🤭）&lt;/p&gt;
&lt;p&gt;第一印象相当不错，感觉是个成熟的产品：有 iOS 应用支持分享菜单，有 Chrome 扩展方便保存，还能存笔记和图片。AI 自动标签功能，可自定义 prompt，能帮我省去手动整理的麻烦。&lt;/p&gt;
&lt;p&gt;不过要完全替代 Anybox，还需要补齐以下几个功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hoarder-app/hoarder/issues/43&#34;&gt;REST API&lt;/a&gt; - 用于数据自动化导入/导出和开发 Alfred 插件&lt;blockquote&gt;
&lt;p&gt;目前只提供命令行工具， REST API 会在&lt;a href=&#34;https://docs.hoarder.app/api/&#34;&gt;0.18.0 下一个版本支持&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hoarder-app/hoarder/issues/75&#34;&gt;便捷的数据导出和备份&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;截图、本地缓存、链接等数据的导出功能还不完善。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;离线归档&lt;blockquote&gt;
&lt;p&gt;现在只支持纯文本缓存和截图。据说后续会支持更多格式（截止2024年5月，已在规划中）。
  更新：到2024年11月，已经支持用 &lt;a href=&#34;https://github.com/Y2Z/monolith&#34;&gt;monolith&lt;/a&gt; 实现完整网页存档，解决了链接失效的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hoarder-app/hoarder/issues/172&#34;&gt;本地网页抓取&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;Anybox 和 &lt;a href=&#34;https://github.com/gildas-lormeau/SingleFile&#34;&gt;SingleFile 扩展&lt;/a&gt; 的配合就很完美，可以把登录后的或者付费墙后的内容直接通过 API 保存下来。
（另外，这样还解决了 SingleFile 元数据只保存域名前缀的问题 - 直接用 SingleFile 下载到 DEVONthink 时只能看到类似 https://github.com 这样不完整的地址）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有一些锦上添花的功能建议：
- RSS 订阅功能&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sissbruecker/linkding&#34;&gt;linkding&lt;/a&gt; 和 &lt;a href=&#34;https://wallabag.org/&#34;&gt;wallabag&lt;/a&gt; 都有这个功能。我现在就使用 RSS 把 wallabag 的内容同步到 DEVONthink，和用 &lt;a href=&#34;https://github.com/cdhigh/kindleear&#34;&gt;kindleear&lt;/a&gt; 订阅 wallabag RSS 每天晚上推送稍候读到 Kindle。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hoarder 虽然暂时还不能完全替代我现有的工具链，但作为一个活跃开发的开源项目，发展势头很好，值得持续关注。&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Hoarder - The Self-Hosted Bookmark Manager</title>
    <link ref="alternate" href="https://yinan.me/hoarder.html" />
    <id>hoarder</id>
    <published>2024-05-24 18:56:37+01:00</published>
    <updated>2024-11-07 14:57:21+00:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;p&gt;Currently, I am using &lt;a href=&#34;https://wallabag.org/&#34;&gt;wallabag&lt;/a&gt; for read-it-later, &lt;a href=&#34;https://anybox.app/&#34;&gt;Anybox&lt;/a&gt; for bookmarking and quick retrival via Alfred, and &lt;a href=&#34;https://www.devontechnologies.com/apps/devonthink&#34;&gt;DEVONthink&lt;/a&gt; for archiving the booksmarks from wallabag and Anybox to better support full text searching (I wrote &lt;a href=&#34;https://github.com/yinan-c/Anybox-sync-Devonthink/blob/main/anybox_to_devonthink.py&#34;&gt;a script&lt;/a&gt; that checks the Anybox API for new links and save them to DEVONthink, which is modified from the &lt;a href=&#34;https://alfred.app/workflows/anybox/anybox/&#34;&gt;Anybox alfredworkflow&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This workflow has been robust and reliable for me, but I am always looking for better selfhosted tools to improve my workflow. There are two things currently missing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Full text search is something Anybox doesn&#39;t have yet. While I write this article, May 2024, it is still under review in the &lt;a href=&#34;https://anybox.canny.io/feature-requests/p/full-text-search&#34;&gt;canny page of Anybox&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Organizing bookmarks. I have a lot of bookmarks. I appreciate the Inbox ideology of Anybox, and the implementation of folders+tags+smart folders, but I still rely a lot on searching instead of mannually organizing (and again anybox is not providing full text search yet). It might help if there is an automatic organization feature like AI tagging or Smart Rules in DEVONthink.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, trying out &lt;a href=&#34;https://github.com/hoarder-app/hoarder&#34;&gt;Hoarder&lt;/a&gt; app today. I would like to see whether it would compete Anybox as my main bookmark manager. Also I do like self-hosting services, and hoarding stuff 🤭.&lt;/p&gt;
&lt;p&gt;At first sight, it feels like a complete app that I can directly put in production, it has a iOS app with share sheet support, chrome extension for easily save from browser, it saves note and images. And I really like the ability to have AI tagging for links and images so that I don&#39;t have to manually organize them. &lt;/p&gt;
&lt;p&gt;However, there are some features missing before it can become my main bookmark manager. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hoarder-app/hoarder/issues/43&#34;&gt;REST API&lt;/a&gt; - for easily exporting data like links, tags, and for an Alfred workflow.&lt;blockquote&gt;
&lt;p&gt;For now, it provides a CLI tool, but I am installing the app on my homeserver instead of my laptop. I will have to ssh to use the CLI, not ideal. A REST API would be good for remotely managing data.
As of Nov 2024, it will be supported in the next version &lt;a href=&#34;https://docs.hoarder.app/api/&#34;&gt;0.18.0&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hoarder-app/hoarder/issues/75&#34;&gt;Easy data export and backup&lt;/a&gt;&lt;blockquote&gt;
&lt;p&gt;I don&#39;t seem to find a very good way to export data easily, for example screenshots, local cache, links.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Offline archiving&lt;blockquote&gt;
&lt;p&gt;For now, Hoarder supports plain text caching and screenshots. It would be good to see other formats supported (Planned, as of May 2024)
  update: As of Nov 2024, it supports full page archival (using &lt;a href=&#34;https://github.com/Y2Z/monolith&#34;&gt;monolith&lt;/a&gt;) to protect against link rot.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hoarder-app/hoarder/issues/172&#34;&gt;Local scrapper&lt;/a&gt; to fetch content after user login for some sites.&lt;blockquote&gt;
&lt;p&gt;What I like about Anybox is its integration with &lt;a href=&#34;https://github.com/gildas-lormeau/SingleFile&#34;&gt;SingleFile extension&lt;/a&gt;. It can directly save the .html downloaded to Anybox via API, so that any content behind paywall will also be downloaded. 
(It actually addresses the pity that SingleFile metadata only contains the first part of the full domain - it will only show something like https://github.com, when you directly download a  html with SingleFile metadata to DEVONthink)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other features could be useful:
- RSS subscription link&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Like what &lt;a href=&#34;https://github.com/sissbruecker/linkding&#34;&gt;linkding&lt;/a&gt; and &lt;a href=&#34;https://wallabag.org/&#34;&gt;wallabag&lt;/a&gt; provides. I am currently relying on RSS to sync my read-it-later from wallabag to DEVONthink and to my kindle with &lt;a href=&#34;https://github.com/cdhigh/kindleear&#34;&gt;kindleear&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To conclude, I will not replace Anybox/wallabag with Hoarder for now. But it is a very young and promising open-source app with rapid iteration, someday it might will.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>整了个 NAS</title>
    <link ref="alternate" href="https://yinan.me/nas.html" />
    <id>nas</id>
    <published>2024-10-15 23:53:20+01:00</published>
    <updated>2024-11-07 14:08:37+00:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;p&gt;最近整了个 &lt;a href=&#34;https://x.com/yinan_ch/status/1840031881254797353&#34;&gt;DS423+&lt;/a&gt; 来代替之前的老旧 MacBook Pro + 一块外接硬盘的 NAS/homeserver 方案。&lt;/p&gt;
&lt;p&gt;我买了四块盘。 1、2 8TB 希捷盘做了 RAID1 冗余，其余两块略大的盘 Basic（希捷12TB 和 16 TB），另有两块 NVMe SSD 作为存储池跑 Docker，放高速存储。几天用下来，发现 NAS 有几个好处，&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;数据从冷数据变成了 24 小时在线的热数据，可以随时访问编辑，而不用插硬盘挂个线。而且，终于把散落在各个硬盘的数据整合在了一起，之前一份数据为了访问方便可能存到了好几块外接硬盘上，而 NAS 提供了个中心化的存储方案。另外据我所知，Btrfs 格式支持 deduplication， 重复数据只存一份，不会浪费空间。&lt;/li&gt;
&lt;li&gt;Raid1 冗余允许一块硬盘坏了重建，和 DSM 的较为完备的预警系统以及文件完整性检查。之前在移动硬盘上数据坏了都不知道，只能从备份恢复（如果有备份的话）。&lt;/li&gt;
&lt;li&gt;Btrfs 文件系统支持快照，可以随时回滚到之前的状态（群晖有官方套件 Snaptshots Replication，非常推荐，就像 macOS 的时间机器一样）。&lt;/li&gt;
&lt;li&gt;无线的时间机器备份真的很爽。第一次有点慢可以考虑接网线备份，之后增量备份的时候就不用管了。&lt;/li&gt;
&lt;li&gt;折腾的乐趣&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;不得不说， DSM 虽然最近&lt;a href=&#34;https://www.reddit.com/r/synology/comments/1feqy62/synology_722_proves_that_this_company_doesnt_care/&#34;&gt;走了倒车&lt;/a&gt;，但仍是一个很新手友好和功能和生态完善的 NAS 系统（其他 unraid truenas 没有用过不做评价）。用下来我的感觉是，DSM 的很多功能是在教用户应该怎么维护数据健康/维持高可用性，怎么做备份和快照。另外还有什么影音库，照片库，跑下载，甚至 DNS，软路由等都是 NAS 很好用的功能，不过目前对我来说收益不是特别大。&lt;/p&gt;
&lt;p&gt;当然缺点也有:&lt;/p&gt;
&lt;p&gt;一是读写速度显然没有插个固态快（受制于网络和机械硬盘），不过花几十块钱买个交换机用 smb 双通道 (multichannel) 也算上了 250 MB/s, 比外接一块机械硬盘快了。 &lt;/p&gt;
&lt;p&gt;二是 8TB 以上7200转的硬盘读写时炒豆子声音还是很大，解决方法是换5400转的硬盘或者上 SATA SSD 解决。如果跑 Docker 和虚拟机，也可以考虑装个 NVME SSD 把套件数据和 Docker 转移到 SSD 存储池上。加内存条减少 swap 或许也有帮助。&lt;/p&gt;
&lt;p&gt;三是 DS423+ 的 DSM 系统虽然好用，但是奈何硬件太弱了，Intel Celeron J3455, PCIe 2.0 x 1 (NVME 只能跑 500 MB/s)，1Gbps 网口，这些要升级就得加钱，然而一台白裙的价格对于其硬件来说已经很贵了。&lt;/p&gt;
&lt;p&gt;关于 SSD 的配置和其他资料，推荐一个链接和两个 Github 项目。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.chiphell.com/thread-2187138-1-1.html&#34;&gt;专门开一贴，群晖硬软件的的各种坑及解决方案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/007revad/Synology_M2_volume&#34;&gt;https://github.com/007revad/Synology_M2_volume&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/007revad/Synology_HDD_db&#34;&gt;https://github.com/007revad/Synology_HDD_db&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外再提一嘴数据安全，虽然 Raid 有冗余，但是冗余不是备份！遵循 &lt;a href=&#34;https://en.wikipedia.org/wiki/Backup&#34;&gt;3-2-1 原则&lt;/a&gt;定期备份数据到云端是很有必要的，防止硬盘损坏，天灾人祸等意外情况。后面会写一篇文章分享一下我的备份方案。&lt;/p&gt;
&lt;p&gt;最后给我的 NAS 上个照片。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;DS423+&#34; src=&#34;https://yinan.me/pics/nas.jpeg&#34; /&gt;&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>Follow 认证</title>
    <link ref="alternate" href="https://yinan.me/follow.html" />
    <id>follow</id>
    <published>2024-10-05 16:50:51+01:00</published>
    <updated>2024-10-05 16:54:36+01:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;p&gt;This message is used to verify that this feed (feedId:41446022334078981) belongs to me (userId:63216204740061184). Join me in enjoying the next generation information browser https://follow.is.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>RSSBrew beta 简单介绍和使用指南</title>
    <link ref="alternate" href="https://yinan.me/rssbrew-config.html" />
    <id>rssbrew-config</id>
    <published>2024-06-02 18:22:45+01:00</published>
    <updated>2024-06-02 19:56:31+01:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;p&gt;&lt;a href=&#34;https://github.com/yinan-c/rssbrew&#34;&gt;RSSBrew&lt;/a&gt; 是一个 RSS 处理和管理的工具。简单来说就是通过处理用户添加 original feed，系统后台获取原文章，根据用户设置进行一系列处理，把处理后的文章重新聚合生成一个新的 processed feed，然后用户订阅这个 processed feed 即可。&lt;/p&gt;
&lt;p&gt;目前拥有以下功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以应用于文章，标题，URL 的过滤条件和过滤组，可用来过滤文章是否进入最终的 feed 或者是否用生成摘要。&lt;/li&gt;
&lt;li&gt;聚合多个 feed，生成一个新的 feed。&lt;/li&gt;
&lt;li&gt;使用 AI 对用户过滤后的文章单独生成摘要，附在原文前，可自定义 prompt。&lt;/li&gt;
&lt;li&gt;周报日报功能，可以将一天或者一周的文章聚合成一个文章。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;安装教程请参考 &lt;a href=&#34;https://github.com/yinan-c/rssbrew/blob/main/INSTALL.md&#34;&gt;INSTALL.md&lt;/a&gt;。安装位置需要 docker engine，需要有公网 ip 的服务器，推荐使用 vps。一个域名（可选），如果没有域名，可以使用 ip:port（默认8000） 的形式访问。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于最近加了 huey 作为任务队列，所以不通过 docker-compose 安装的方法暂时没有更新，目前推荐 docker-compose 安装。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果需要配置域名访问，推荐使用 caddy 或者 nginx 作为反代，这里就不做详细介绍了。
注意需要把部署的域名加入到 &lt;code&gt;.env&lt;/code&gt; 的变量 DEPLOYMNET_URL 中才能正常通过自定义域名访问。如果没有，请把 ip:port 加入到 DEPLOYMNET_URL 中，不需要加 http:// 等协议头。&lt;/p&gt;
&lt;h2&gt;使用说明&lt;/h2&gt;
&lt;p&gt;有用户反馈想要使用说明，由于目前文档没有写好，这里简单写一下如何使用。访问应用后有四个配置项，分别是 original feeds, processed feeds, tags, app setting。因为测试阶段短时间内文档不会完成，所以我这里尽可能写的详细，请根据需要的功能跳转到对应的段落阅读。&lt;/p&gt;
&lt;h3&gt;App setting&lt;/h3&gt;
&lt;p&gt;App setting 用来配置 auth code，设置后需要在访问时在订阅源地址后面加上 &lt;code&gt;?key=your_auth_code&lt;/code&gt; 才能访问。&lt;/p&gt;
&lt;p&gt;original feeds 用来添加原始的，需要处理的 atom 或者 xml feed，可以配置 url, 以及可选配置名称和 tag。 Tag 是用来方便分类管理 original feeds 的。&lt;/p&gt;
&lt;p&gt;processed feeds 是处理后的 feed，在列表栏从左到右是名称，每次更新周期需要总结的文章数，订阅链接，以及包含了多少个 original feeds。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;processed_feed&#34; src=&#34;https://yinan.me/pics/processed_feed.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;点击名称进入 processed feed 的配置页面，可以配置过滤条件，过滤组，摘要和 日周报的生成。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;processed_feed_config&#34; src=&#34;https://yinan.me/pics/processed_feed_config.png&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;聚合功能&lt;/h3&gt;
&lt;p&gt;前两项名称和 Feeds 是必须的，feeds 是多选框，用来添加已有的 original feeds，最终会把所有选中的 feeds 聚合到这个 processed feed 中。有了这两个配置，理论上就可以用上聚合功能订阅了，接下里所有的配置都是可选的。&lt;/p&gt;
&lt;p&gt;Feed group relational operator (过滤组关系) 会在后面过滤组中详细介绍。目前先不用管。&lt;/p&gt;
&lt;h3&gt;Summarization options AI 摘要功能&lt;/h3&gt;
&lt;p&gt;在 summarization options 中，可以配置每次更新（测试阶段默认是每 5 分钟，在 docker-compose.yml 中通过 cron 变量可以把周期调大一点）总结的文章数，为 0 就是不用 AI 总结功能。可以选择语言，model, 自定义 prompt。默认 prompt 会给一条一句话总结和一个稍长的总结。默认效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;ai_summary&#34; src=&#34;https://yinan.me/pics/AI_summary_rssbrew.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Summary group relational operator (过滤组关系) 同上，会在后面过滤组中详细介绍。目前先不用管。&lt;/p&gt;
&lt;h3&gt;Digest options 日周报功能&lt;/h3&gt;
&lt;p&gt;这是一个在 telegram channel rss 生成周报的效果：&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;digest_telegram&#34; src=&#34;https://yinan.me/pics/digest_telegram.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Toggle digest 是开关，开启后会生成日报或者周报。默认是关闭的。如果开启，可以配置 daily/weekly。Last digest 的时间会在后台自动生成周日报时更新，&lt;/p&gt;
&lt;p&gt;留空即在下一次更新时自动生成 digest，后面系统会根据这个时间是否需要生成新的 digest。一般情况下，这个项不需要管，如果需要测试用手动生成周日报的功能，可以把时间调到一周前或者一日前。&lt;/p&gt;
&lt;p&gt;勾选 toggle digest 之后，可以配置周日报格式，主要由三大部分构成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;周/日报目录。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;目录就是一个简单的标题-链接的列表，可以一眼扫过一周更新的条目，如上显示。如果在 summarizaiton options 中开启了 AI 摘要功能并且用了默认的 prompt，除了标题和链接，还会有 AI 一句话总结。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;条目详细内容&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;如上图所示，紧跟着目录是 details，可以自选包含 AI 生成的摘要（需要在 summarization options 中开启 AI 摘要功能）和原文章内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;AI 分析你的周/日报。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;勾选 use ai digest, 可以配置 digest model (推荐使用 gpt-4 或者 4o, 我测试下来 3.5 turbo 偶尔会出现总结不全的情况) 和自定义 prompt。下面 send full articles 是指你是否想要 AI 总结周日报的文章全文，如果不勾选，为了节约 token，和防止条目过多过长，只会发送给 AI 每篇文章的标题 url 和摘要（摘要需要在 summarization options 中开启 AI 摘要功能）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上三大部分关于周日报内容的配置都在 what to include in digest 中, 也就是 toc, one-line summary, summary, ai digest。&lt;/p&gt;
&lt;p&gt;另外，在 toggle digest 后面有一个选项 toggle entries。如果有些 feed 你只想看每周每天扫一遍周/日报，不想要看到其他的原文章条目更新，让你的未读堆积。你可以取消勾选 Toggle entries 来隐藏原文章条目，不要怕错过，他们会在日报周报中出现。&lt;/p&gt;
&lt;h3&gt;过滤和过滤组&lt;/h3&gt;
&lt;p&gt;我们还没有讨论到过滤，如果配置了以上的内容， processed feed 会把所有的 original feeds 聚合到一起，生成一个新的 feed。但是这个 feed 会包含所有的原文章，并且不管是什么文章，都会进入周日报，进入更新的 entries, 或者发给 AI 生成摘要，如果想要更加个人化的信息源，比如说监控某些关键词，同时屏蔽另外一些关键词，或者比如说让 AI 长文总结，短文不总结，或者只总结某一个关键词文章，这需要过滤功能。&lt;/p&gt;
&lt;p&gt;为了实现高级的过滤，RSSBrew 用了两层过滤条件。也即 过滤组（filter group）- 过滤器 (filters)。过滤组包含过滤器，负责管理组内所有过滤器的关系（任意条件 any /所有条件 all/无一条件 none = not any）满足以及过滤器的用途（用来完全屏蔽文章或者，不屏蔽文章只是过滤他是否总结）。过滤器是具体的过滤条件，比如说标题/内容/url 包含某个关键词，满足某个正则表达式，或者文章长度大于/小于某个值。&lt;/p&gt;
&lt;p&gt;多个同用途的过滤组之间还可以共同作用，他们之间的关系就是由上面提到的过滤组关系 Feed group relational operator 以及 Summary group relational operator 来决定的。比如说你有两个过滤组 A B 都是用来 Feed Filter(用来完全屏蔽文章) 的， 且他们之间是 any 的关系。分别由两个 and 过滤器构成，那么就可以实现高级的过滤运算逻辑比如：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;A or B = (A-1 and A-2) or (B-1 and B-2)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当然如果你只是想要最简单的过滤，只需要一个过滤组就可以了。即使这样你也可以在组内设置多个过滤条件，或者通过配置正则表达式让单层过滤器实现很多功能。&lt;/p&gt;
&lt;h2&gt;后期 plan 和功能&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;前端报错信息，目前很多报错只是记录在后台，没有返回给前端。出错了 debug 时需要查看 logs 日志。&lt;/li&gt;
&lt;li&gt;tag folder 功能完善,更好的分类管理&lt;/li&gt;
&lt;li&gt;opml 的批量导入导出&lt;/li&gt;
&lt;li&gt;全文获取&lt;/li&gt;
&lt;li&gt;json feed 支持&lt;/li&gt;
&lt;li&gt;完善文档&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不过目前正忙着写毕业论文和找工作，所以短期内这些功能都没有 ETA。但等忙完毕业论文会把这个项目完善，也会一直维护更新。欢迎在 &lt;a href=&#34;https://t.me/rssbrew&#34;&gt;telegram 交流群&lt;/a&gt; 和 GitHub issue 中里提出建议和需求。&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>苹果端 Todo App 简单比较</title>
    <link ref="alternate" href="https://yinan.me/todo-app.html" />
    <id>todo-app</id>
    <published>2024-05-22 00:32:57+01:00</published>
    <updated>2024-05-22 14:00:21+01:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;p&gt;继半年多前从 Things 转移到 OmniFocus 之后，今天又在探索苹果端几大 Todo App，主要比较了 Things, OmniFocus 以及 TickTick（唯一跨平台，已经赢了🤭）。&lt;/p&gt;
&lt;h2&gt;Things&lt;/h2&gt;
&lt;p&gt;先说说老朋友 Things，Logbook 显示我从2022年的7月开始用到了2023年的11月15日，等了一年半的 Things 4，始终没有等到。&lt;/p&gt;
&lt;p&gt;不过 Things 3 还是一如既往美观简洁好用，可惜相比较 OmniFocus 缺了以下我觉得很有用的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Filter/Smart List: Shortcuts 目前半残，如果我不能在组会前，看到在 PhD Area 完成了哪些项目我怎么给老板交差？&lt;/li&gt;
&lt;li&gt;Review Perspective: OmniFocus 可以帮你 keep track review 列表，Things 只能手动 Review。&lt;/li&gt;
&lt;li&gt;Automation: 在 OmniFocus 里可以写脚本把符合某些条件的 Todo 自动归类，或者 Tag。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;OmniFocus&lt;/h2&gt;
&lt;p&gt;我是从 OmniFocus 4 更新（2023年底）之后才开始重度使用的，上面其实已经把我这半年多用 OmniFocus 的感受列的差不多了，唯独有一点我还希望能够加上的，就是 Kanban View。&lt;/p&gt;
&lt;p&gt;我的任务通常会卡在某个节点比如说，计算中，或者等待回复，而不是简简单单的 0-1 两个状态，而 kanban 以及 Things 的 Heading 就很好地处理了这个问题。OmniFocus 虽然有 Nested Task，但是使用下来更像是子/母任务的从属关系，描述任务的状态我更多用的是标签，但是仍不如 Kanban 拖拽来的直观。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EDIT: 用 Tagging 作为 Kanban 的坏处在于它不是 exclusive 的，把任务从一个标签拖拽到另一个会让它同时打上两个标签，作为 Kanban 显然不理想。好在&lt;a href=&#34;https://discourse.omnigroup.com/t/sub-tag-exclusivity/41773/5&#34;&gt;论坛&lt;/a&gt;里有人提到用 Command + 拖拽就可以实现转移标签。&lt;/p&gt;
&lt;p&gt;另外，如果需要一个 Kanban board based on Tagging，可以看一下&lt;a href=&#34;https://omni-automation.com/omnifocus/plug-in-kanban-board.html&#34;&gt;这个插件&lt;/a&gt;，试用了一下还不错，从脚本上实现 exclusive tagging，把不同 board 的按钮放在工具栏也能实现在不同标签(Board)之间转移任务。比如说我现在的工具栏和 kanban 长这样：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt=&#34;&#34; src=&#34;https://yinan.me/pics/kanban.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;题外话，Things vs OmniFocus 的比较于我有点像 Anybox 和 DEVONthink 的比较，一个简洁漂亮，功能单一，能完成他该完成的，一个功能强大，有点 buggy，不够美观，&lt;/p&gt;
&lt;h2&gt;TickTick&lt;/h2&gt;
&lt;p&gt;一度觉得很理想，有 Kanban，四象限，过滤器，还有经典的日历视图。
除了没有 Area 的概念，Project 多了可能会很乱。
但是为什么不让我在 iOS 端用国内滴答的账号？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EDIT: 感谢读者提醒，把 App 语言修改成中文后，登录界面底下可以切换成国内滴答。我再体验几天，后续可能会更新详细体验和比较。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;其他玩家&lt;/h2&gt;
&lt;p&gt;我没有测试 Todoist，因为订阅费用实在太高，但是据说自然语言输入很好用。还有一些后来者：比如 GoodTask (in SetApp) 可以作为 Reminder 的强化版本。我没有考虑长期使用，所以这里不详细介绍了。&lt;/p&gt;
&lt;p&gt;最后，Todo 只是帮助 prioritize 和 focus 的工具，为了 Get Things Done，一张纸也可以做到这样。所以没有最好的 Todo App, 只有最适合你的。&lt;/p&gt;
&lt;p&gt;切忌陷入&lt;a href=&#34;https://utgd.net/article/20657&#34;&gt;效率陷阱&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;切忌花在拖拽, Tag Todo 比实际完成 Todo 花的时间还要多。&lt;/p&gt;
&lt;p&gt;切忌频繁更换工具，能用就不要动。&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title>About</title>
    <link ref="alternate" href="https://yinan.me/about.html" />
    <id>about</id>
    <published>2023-06-19 17:35:38+01:00</published>
    <updated>2024-04-30 17:07:59+01:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://yinan.me/hello-world&#34;&gt;中文简介&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hi, I am Yinan, a PhD student in Physics. You can access this blog via &lt;a href=&#34;https://yinan.me/&#34;&gt;yinan.me&lt;/a&gt; and &lt;a href=&#34;https://yinan.ch/&#34;&gt;yinan.ch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since I started my PhD, I have been reading and learning a lot, by writing down tons of notes and worklogs. Most of my notes are Markdown files stored in an app called &lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since almost all of my notes are going digital now, it is not a bad idea to put them online. Also, I have been writing short articles in Chinese since very young, but hadn&#39;t had the chance to collect and share them with others. I have been thinking about starting a blog for a long time. &lt;/p&gt;
&lt;p&gt;Now, I finally decided to start one, thanks to a great tool &lt;a href=&#34;https://github.com/ahui2016/pyboke&#34;&gt;PyBoke&lt;/a&gt;, which makes it very easy to create a blog using Markdown files. I know other tools like WordPress and Hugo that can do the same thing, but I like the simplicity of PyBoke. &lt;/p&gt;
&lt;h2&gt;About this blog&lt;/h2&gt;
&lt;p&gt;This blog is created by a modified version of &lt;a href=&#34;https://github.com/yinan-c/pyboke&#34;&gt;PyBoke&lt;/a&gt;, where I added features like full text RSS, navigation buttons, and abstracts on the homepage.&lt;/p&gt;
&lt;p&gt;The original version of PyBoke is created by &lt;a href=&#34;https://github.com/ahui2016&#34;&gt;ahui2016&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This blog is fully open source. All the articles in Markdown format, together with the templates I use on this website can also be found in the &lt;a href=&#34;https://github.com/yinan-c/blog&#34;&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I use the theme &lt;a href=&#34;https://newcss.net/&#34;&gt;newcss&lt;/a&gt;, and publish the blog on &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; and &lt;a href=&#34;https://pages.cloudflare.com&#34;&gt;Cloudflare Pages&lt;/a&gt;. You can also access the blog via &lt;a href=&#34;https://1nan.pages.dev/&#34;&gt;1nan.pages.dev&lt;/a&gt; or &lt;a href=&#34;https://yinan-c.github.io/&#34;&gt;yinan-c.github.io&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What will I write here?&lt;/h2&gt;
&lt;p&gt;I am interested in many things, including but not limited to: RSS, macOS softwares, Python ... As I browse the internet (mostly via RSS), interesting things will pop up and I am happy to share online here.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Twitter logo icons created by &lt;a href=&#34;https://www.flaticon.com/free-icon/twitter_3670151&#34;&gt;Md Tanvirul Haque - Flaticon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Email icon from &lt;a href=&#34;https://www.freepnglogos.com/images/email-13765.html&#34;&gt;freepnglogos.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Matodon logo by Eugen Rochko &amp;amp; other Mastodon contributors - https://blog.joinmastodon.org/, AGPL, https://commons.wikimedia.org/w/index.php?curid=120470930&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;License&lt;/h1&gt;
&lt;p&gt;The articles I write are licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;CC BY 4.0&lt;/a&gt;. You are free to: 
- &lt;strong&gt;Share&lt;/strong&gt; — copy and redistribute the material in any medium or format
- &lt;strong&gt;Adapt&lt;/strong&gt; — remix, transform, and build upon the material
for any purpose, even commercially.&lt;/p&gt;
&lt;p&gt;The licensor cannot revoke these freedoms as long as you follow the license terms.&lt;/p&gt;
&lt;p&gt;Under the following terms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Attribution&lt;/strong&gt; — You must give appropriate credit , provide a link to the license, and indicate if changes were made . You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No additional restrictions&lt;/strong&gt; — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link ref="alternate" href="https://yinan.me/hello-world.html" />
    <id>hello-world</id>
    <published>2023-06-18 18:59:53+01:00</published>
    <updated>2024-04-30 17:07:58+01:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;h2&gt;我是谁?&lt;/h2&gt;
&lt;p&gt;我叫Yinan，目前在英国读博，物理专业。本科在中科大，也是学的物理。这个博客的域名是 &lt;a href=&#34;https://yinan.me/&#34;&gt;yinan.me&lt;/a&gt; 和 &lt;a href=&#34;https://yinan.ch/&#34;&gt;yinan.ch&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;为什么写博客？&lt;/h2&gt;
&lt;p&gt;回想过去的25年，虽然有记录，写笔记的爱好，但是我还没有正经得把自己的所见所思整理，更没有发布。开始读博以后，有意识的把工作记录和日常见闻记录成文档，碎碎念积少成多，也就成为我在这个世界上来过的一点点证明。&lt;/p&gt;
&lt;p&gt;博客作为一个自己的 digital 小岛，我认为非常适合将这些见闻想法汇集。平时阅读很多文章，浏览很多新闻信息，但是大多很快就忘了，它们只是作为信息从我脑中漂过，而不是作为知识想法被我内化。组织语言记录是对这些繁杂信息的整理消化，“再创作”，也是一次自我反思。从这个意义上看，写博客或许可以帮助我学习知识，内化想法，同时可以提升表达想法的能力。&lt;/p&gt;
&lt;p&gt;我个人非常欣赏 Blog 这种“链接孤岛“的想法，同时也非常认同 open web 的愿景，觉得有价值的信息是应该被分享的，至少值得被记录下来。但是我不喜欢中心化的平台，更不用说 under sensorship 的那些，不喜欢被算法推荐的信息来源，我喜欢把数据自托管，所谓的 self-hosted。&lt;/p&gt;
&lt;p&gt;另外还有一个原因，阅读确实会让人有表达的冲动。我从小就不擅长写文章，但我在初中时仍是写了几篇中短篇小说，高中时候也会在月考作文里写写短篇，偶尔还能拿高分，就是因为当时看了很多各式各样的小说，当时的我很有表达，模仿的欲望。而现在写文章能力已经大大退步了，所以写博客权当给自己练练手，希望我能坚持。&lt;/p&gt;
&lt;h2&gt;我会写些什么&lt;/h2&gt;
&lt;p&gt;我平时喜欢折腾软件，写写脚本（因为平时科研工作有太多重复作业了），喜欢打游戏，每天刷刷 RSS，听听播客，听音乐看剧。在日常冲浪中，任何我觉得有意思，有分享意义的东西，都可能会发布在这里。又也许会把之前的一些想法笔记整理出来，发在这里。&lt;/p&gt;
&lt;h2&gt;博客用了什么&lt;/h2&gt;
&lt;p&gt;本博客的文章用 Markdown 编写。
采用了开源方案 &lt;a href=&#34;https://github.com/ahui2016/pyboke&#34;&gt;PyBoke&lt;/a&gt; 生成静态网站，自己在此基础上加了点&lt;a href=&#34;https://github.com/yinan-c/pyboke/&#34;&gt;其他功能&lt;/a&gt;，例如首页显示摘要，文章底部翻页，full text RSS 格式。使用的是 &lt;a href=&#34;https://newcss.net/&#34;&gt;newcss 主题&lt;/a&gt;，再通过 &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; 和 &lt;a href=&#34;https://pages.cloudflare.com&#34;&gt;Cloudflare Pages&lt;/a&gt; 发布。你也可以通过 &lt;a href=&#34;https://1nan.pages.dev/&#34;&gt;1nan.pages.dev&lt;/a&gt; 或 &lt;a href=&#34;https://yinan-c.github.io/&#34;&gt;yinan-c.github.io&lt;/a&gt; 访问。&lt;/p&gt;
&lt;p&gt;本博客所有源 markdown 文件，以及模板开源，托管在 &lt;a href=&#34;https://github.com/yinan-c/blog&#34;&gt;GitHub&lt;/a&gt; 上。&lt;/p&gt;
&lt;h2&gt;版权&lt;/h2&gt;
&lt;p&gt;本博客所有文章采用 &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;CC BY 4.0&lt;/a&gt; 协议。您可以自由地：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;共享&lt;/strong&gt; - 在任何媒介以任何形式复制、发行本作品 在任何用途下，甚至商业目的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;演绎&lt;/strong&gt; - 修改、转换或以本作品为基础进行创作 在任何用途下，甚至商业目的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只要你遵守许可协议条款，许可人就无法收回你的这些权利。&lt;/p&gt;
&lt;p&gt;惟须遵守下列条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;署名&lt;/strong&gt; - 您必须给出 适当的署名 ，提供指向本许可协议的链接，同时 标明是否（对原始作品）作了修改 。您可以用任何合理的方式来署名，但是不得以任何方式暗示许可人为您或您的使用背书。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;没有附加限制&lt;/strong&gt; - 您不得适用法律术语或者 技术措施 从而限制其他人做许可协议允许的事情。&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  
  <entry>
    <title>Contact Me</title>
    <link ref="alternate" href="https://yinan.me/contact.html" />
    <id>contact</id>
    <published>2023-07-08 20:53:50+01:00</published>
    <updated>2024-04-30 11:32:48+01:00</updated>
    <author><name>Yinan</name></author>
    <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;mailto:hello@yinan.me&#34;&gt;Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/yinan-c&#34;&gt;yinan-c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  

</feed>